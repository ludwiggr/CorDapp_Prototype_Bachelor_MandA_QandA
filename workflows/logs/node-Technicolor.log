[INFO ] 2020-04-19T23:39:55,076Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-19T23:39:55,627Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:39:59,830Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:40:03,486Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-19T23:40:03,511Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:40:03,513Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:40:04,439Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:04,489Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-19T23:40:05,414Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:05,423Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:40:05,425Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-19T23:40:05,764Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:40:05,795Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:40:06,649Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-19T23:40:07,435Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:40:07,456Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:40:07,508Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:40:07,509Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:40:07,509Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:40:09,113Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:40:09,114Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-19T23:40:09,334Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:40:09,335Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-19T23:40:09,398Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:40:09,398Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-19T23:40:09,533Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:40:09,544Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:09,877Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:40:09,892Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:09,892Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:40:09,892Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:09,920Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:40:09,942Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:09,943Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:40:09,943Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:09,964Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:10,038Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:10,048Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:40:10,049Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:10,156Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:40:10,178Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:10,178Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:40:10,178Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:10,178Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:40:10,730Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:10,730Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:40:10,746Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,531Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:40:11,531Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,563Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:40:11,563Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,595Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,595Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-19T23:40:11,606Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,606Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-19T23:40:11,616Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,617Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-19T23:40:11,617Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,617Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:11,638Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-19T23:40:11,749Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:11,749Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-19T23:40:11,770Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:11,771Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,771Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:40:11,791Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,791Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-19T23:40:11,815Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,828Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,832Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:40:11,832Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,853Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:40:11,853Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,853Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:40:11,854Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,854Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:40:11,898Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,899Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:40:11,899Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,910Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:40:11,910Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,921Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:40:11,921Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:40:11,931Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,931Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-19T23:40:11,941Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,941Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-19T23:40:11,951Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,951Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-19T23:40:11,951Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:11,951Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:11,967Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-19T23:40:12,007Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:12,007Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:40:12,007Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:12,007Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:40:12,007Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:12,007Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:40:12,018Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:40:12,018Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:12,018Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:40:12,060Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:12,060Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-19T23:40:14,805Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:40:14,815Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:14,815Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-19T23:40:14,815Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:40:14,846Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:40:14,864Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-19T23:40:14,864Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:40:14,914Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-19T23:40:15,405Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-233945.083\nodes\0\cordapps] {}
[INFO ] 2020-04-19T23:40:15,415Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:40:15,484Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:40:15,704Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:40:17,818Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:40:17,900Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:40:18,025Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:40:18,026Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:40:18,843Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:39:44.937Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:40:25,488Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:25,495Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-233945.083\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:25,495Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:25,604Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:25,835Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:25,843Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:29,257Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:30,247Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:30,265Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:30,274Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:30,274Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:30,389Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:30,462Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:40:30,501Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:40:30,501Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:40:30,889Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:40:30,905Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:40:30,906Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:30,912Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:40:31,155Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:31,237Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:40:31,272Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:31,318Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:31,353Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=494C7CBCC28231A9B4DC4D5F34A51A85F6571EDA8E333DAC42CE0BD3A563153B uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:40:31,363Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-19T23:40:31,368Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-19T23:40:32,084Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:32,127Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:32,131Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:32,131Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:32,131Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:32,155Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-233945.083\nodes\1\cordapps] {}
[INFO ] 2020-04-19T23:40:32,156Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:40:32,156Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:40:32,177Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:40:32,233Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:40:32,236Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:40:32,286Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:40:32,286Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:40:32,291Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:39:44.937Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:40:33,537Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,540Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-233945.083\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,540Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,598Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,603Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,603Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,869Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,889Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,891Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,895Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,895Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,972Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:33,983Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:40:33,987Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:40:33,987Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:40:34,190Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:40:34,193Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:40:34,232Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:40:34,233Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:34,238Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:40:34,250Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:34,263Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:40:34,269Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:34,278Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:34,318Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=494C7CBCC28231A9B4DC4D5F34A51A85F6571EDA8E333DAC42CE0BD3A563153B uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:40:34,335Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:34,358Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:34,362Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:40:34,378Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:34,381Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:40:34,400Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:34,400Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:34,401Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:34,401Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:34,429Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-233945.083\nodes\2\cordapps] {}
[INFO ] 2020-04-19T23:40:34,433Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:40:34,433Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:40:34,467Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-233945.083/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:40:34,546Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:40:34,549Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:40:34,594Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:40:34,594Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:40:34,599Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:39:44.937Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:40:35,697Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:35,703Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-233945.083\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:35,703Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:35,769Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:35,783Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:35,783Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:36,020Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:36,037Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:36,039Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:36,048Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:36,049Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:36,143Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:40:36,154Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:40:36,157Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:40:36,157Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:40:36,986Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:40:36,988Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:40:37,023Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:40:37,023Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,026Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:40:37,037Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,047Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:40:37,053Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,060Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:37,109Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=494C7CBCC28231A9B4DC4D5F34A51A85F6571EDA8E333DAC42CE0BD3A563153B uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:40:37,121Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,125Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339630905) {}
[INFO ] 2020-04-19T23:40:37,128Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:40:37,139Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,141Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:40:37,152Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339634232) {}
[INFO ] 2020-04-19T23:40:37,154Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:40:37,167Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,169Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:40:37,181Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,181Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:40:37,181Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339637023) {}
[INFO ] 2020-04-19T23:40:37,181Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-19T23:40:37,185Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:40:37,185Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:40:37,192Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:40:37,192Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:40:37,571Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
[WARN ] 2020-04-19T23:40:37,571Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
[ERROR] 2020-04-19T23:40:37,826Z [Mock network] internal.Verifier. - Error validating transaction CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6. [errorCode=azjnpq, moreInformationAt=https://errors.corda.net/OS/4.4/azjnpq] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
java.lang.IllegalArgumentException: Failed requirement: Questioner only may sign QA Question issue.
	at com.template.contracts.QAContract.verify(QAContract.kt:78) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:50) ~[main/:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:21) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
[ERROR] 2020-04-19T23:40:37,828Z [Mock network] internal.Verifier. - Error validating transaction CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6. [errorCode=azjnpq, moreInformationAt=https://errors.corda.net/OS/4.4/azjnpq] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
java.lang.IllegalArgumentException: Failed requirement: Questioner only may sign QA Question issue.
	at com.template.contracts.QAContract.verify(QAContract.kt:78) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:50) ~[main/:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:21) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
[INFO ] 2020-04-19T23:40:37,828Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
[INFO ] 2020-04-19T23:40:37,837Z [Mock network] statemachine.StaffedFlowHospital. - Flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Invocation, sessionId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AskInitiator, classToInitiateWith=class com.template.flows.AskInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=710586748B95D3C7501331D87E266252B06DDD6728DF5FF6DFBF04735F6135D4), errorState=Clean, numberOfSuspends=0), flowLogic=com.template.flows.AskInitiator@7c0a7486, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3e278afe-663e-48fa-ab5e-f8c4fe6498af) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
[INFO ] 2020-04-19T23:40:37,842Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:50) ~[main/:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:21) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Questioner only may sign QA Question issue.
	at com.template.contracts.QAContract.verify(QAContract.kt:78) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[INFO ] 2020-04-19T23:40:37,850Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:50) ~[main/:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:21) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Questioner only may sign QA Question issue.
	at com.template.contracts.QAContract.verify(QAContract.kt:78) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:40:37,878Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] errored, dumping all transitions:

 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.505Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4ffbbdcd-8f35-43ae-a6ec-c54b29938c56], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Invocation, sessionId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AskInitiator, classToInitiateWith=class com.template.flows.AskInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=710586748B95D3C7501331D87E266252B06DDD6728DF5FF6DFBF04735F6135D4), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@386ae497])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@386ae497])
    SignalFlowHasStarted(flowId=[4ffbbdcd-8f35-43ae-a6ec-c54b29938c56])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@386ae497]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.852Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:40:37.407Z
    2020-04-19T23:40:37.835Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7356411844449713382, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.859Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.866Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:40:37.835Z
    2020-04-19T23:40:37.866Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
[WARN ] 2020-04-19T23:40:37,878Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] error [errorCode=xffbfv, moreInformationAt=https://errors.corda.net/OS/4.4/xffbfv] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:50) ~[main/:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:21) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Questioner only may sign QA Question issue.
	at com.template.contracts.QAContract.verify(QAContract.kt:78) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:40:37,882Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=xffbfv, moreInformationAt=https://errors.corda.net/OS/4.4/xffbfv] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:50) ~[main/:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:21) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Questioner only may sign QA Question issue.
	at com.template.contracts.QAContract.verify(QAContract.kt:78) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:40:37,942Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] errored, dumping all transitions:

 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.505Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4ffbbdcd-8f35-43ae-a6ec-c54b29938c56], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Invocation, sessionId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AskInitiator, classToInitiateWith=class com.template.flows.AskInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=710586748B95D3C7501331D87E266252B06DDD6728DF5FF6DFBF04735F6135D4), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@386ae497])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@386ae497])
    SignalFlowHasStarted(flowId=[4ffbbdcd-8f35-43ae-a6ec-c54b29938c56])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@386ae497]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.852Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:40:37.407Z
    2020-04-19T23:40:37.835Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7356411844449713382, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.859Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.866Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:40:37.835Z
    2020-04-19T23:40:37.866Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] ---
  Timestamp: 2020-04-19T23:40:37.935Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6, errorId=-7356411844449713382)], sessions=[], senderUUID=3e278afe-663e-48fa-ab5e-f8c4fe6498af)
    CreateTransaction
    RemoveCheckpoint(id=[4ffbbdcd-8f35-43ae-a6ec-c54b29938c56])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[4ffbbdcd-8f35-43ae-a6ec-c54b29938c56], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-7356411844449713382, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Invocation, sessionId=02b54210-332e-4ed1-bb64-05df64be0cf2, timestamp: 2020-04-19T23:40:37.251Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AskInitiator, classToInitiateWith=class com.template.flows.AskInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=710586748B95D3C7501331D87E266252B06DDD6728DF5FF6DFBF04735F6135D4), errorState=Errored(errors=[FlowError(errorId=-7356411844449713382, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=com.template.flows.AskInitiator@7c0a7486, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3e278afe-663e-48fa-ab5e-f8c4fe6498af))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2020-04-19T23:40:37.866Z
    2020-04-19T23:40:37.878Z
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
[WARN ] 2020-04-19T23:40:37,942Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ffbbdcd-8f35-43ae-a6ec-c54b29938c56] error [errorCode=xffbfv, moreInformationAt=https://errors.corda.net/OS/4.4/xffbfv] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4ffbbdcd-8f35-43ae-a6ec-c54b29938c56, invocation_id=02b54210-332e-4ed1-bb64-05df64be0cf2, invocation_timestamp=2020-04-19T23:40:37.251Z, origin=Only For Testing, session_id=02b54210-332e-4ed1-bb64-05df64be0cf2, session_timestamp=2020-04-19T23:40:37.251Z, thread-id=214}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Questioner only may sign QA Question issue., contract: com.template.contracts.QAContract, transaction: CF4BD560472BCFECB8C2364899049153F5F4B53BF1322A450D5AD33CA210BAF6
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:50) ~[main/:?]
	at com.template.flows.AskInitiator.call(AskFlow.kt:21) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Questioner only may sign QA Question issue.
	at com.template.contracts.QAContract.verify(QAContract.kt:78) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[INFO ] 2020-04-19T23:43:56,421Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-19T23:43:56,995Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:44:00,534Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:44:04,202Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-19T23:44:04,223Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:44:04,224Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:44:05,078Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:05,120Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-19T23:44:05,852Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:05,863Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:44:05,863Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-19T23:44:06,124Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:44:06,146Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:44:06,907Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-19T23:44:07,533Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:44:07,533Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:44:07,575Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:44:07,576Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:44:07,576Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:44:08,980Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:44:08,980Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-19T23:44:09,138Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:44:09,139Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-19T23:44:09,181Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:44:09,181Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-19T23:44:09,266Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:44:09,266Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:09,457Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:44:09,478Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:09,478Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:44:09,478Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:09,493Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:44:09,515Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:09,515Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:44:09,515Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:09,547Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:09,590Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:09,600Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:44:09,600Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:09,701Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:44:09,712Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:09,712Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:44:09,712Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:09,729Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:44:10,094Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:10,095Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:44:10,131Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:10,748Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:44:10,748Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:10,790Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:44:10,790Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:44:10,821Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:10,821Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-19T23:44:10,831Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:10,831Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-19T23:44:10,832Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:10,832Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-19T23:44:10,832Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:10,832Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:10,854Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-19T23:44:10,929Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:10,929Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-19T23:44:10,939Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:10,951Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:10,952Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:44:10,986Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:10,986Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-19T23:44:11,019Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,019Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,019Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:44:11,019Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,053Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:44:11,065Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,066Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:44:11,066Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,066Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:44:11,120Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,121Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:44:11,122Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,138Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:44:11,138Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,148Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:44:11,149Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:44:11,159Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,159Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-19T23:44:11,169Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,169Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-19T23:44:11,183Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,183Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-19T23:44:11,183Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,183Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:11,193Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,246Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:44:11,278Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,278Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-19T23:44:11,291Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:44:11,312Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:11,312Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-19T23:44:11,312Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:44:11,342Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:44:11,370Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-19T23:44:11,371Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:44:11,440Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-19T23:44:11,753Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234347.095\nodes\0\cordapps] {}
[INFO ] 2020-04-19T23:44:11,763Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:44:11,783Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:44:11,961Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:44:13,204Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:44:13,276Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:44:13,377Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:44:13,378Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:44:14,070Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:43:46.972Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:44:20,758Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:20,764Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234347.095\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:20,764Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:20,846Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:21,027Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:21,042Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:24,303Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:25,263Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:25,267Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:25,276Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:25,276Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:25,412Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:25,507Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:44:25,544Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:44:25,544Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:44:25,979Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:44:25,999Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:44:25,999Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:26,010Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:44:26,322Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:26,444Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:44:26,499Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:26,561Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:26,655Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:44:26,671Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-19T23:44:26,676Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-19T23:44:27,407Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:27,446Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:27,448Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:27,449Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:27,450Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:27,484Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234347.095\nodes\1\cordapps] {}
[INFO ] 2020-04-19T23:44:27,486Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:44:27,486Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:44:27,498Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:44:27,543Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:44:27,547Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:44:27,606Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:44:27,606Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:44:27,612Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:43:46.972Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:44:28,943Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:28,947Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234347.095\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:28,947Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:28,991Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:28,996Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:28,996Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:29,216Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:29,238Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:29,240Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:29,247Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:29,247Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:29,360Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:29,370Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:44:29,375Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:44:29,375Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:44:29,596Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:44:29,599Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:44:29,645Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:44:29,645Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:29,649Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:44:29,661Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:29,673Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:44:29,679Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:29,688Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:29,724Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:44:29,739Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:29,744Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:29,746Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:44:29,762Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:29,764Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:44:29,780Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:29,780Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:29,781Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:29,781Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:29,798Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234347.095\nodes\2\cordapps] {}
[INFO ] 2020-04-19T23:44:29,799Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:44:29,799Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:44:29,814Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234347.095/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:44:29,864Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:44:29,868Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:44:29,922Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:44:29,922Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:44:29,929Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:43:46.972Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:44:31,079Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,085Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234347.095\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,085Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,135Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,146Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,146Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,462Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,480Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,483Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,490Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,490Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,596Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:44:31,604Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:44:31,606Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:44:31,606Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:44:31,797Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:44:31,800Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:44:31,845Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:44:31,845Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:31,848Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:44:31,863Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:31,878Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:44:31,903Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:31,915Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:31,958Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:44:31,970Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:31,974Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339865999) {}
[INFO ] 2020-04-19T23:44:31,976Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:44:32,335Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:32,339Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:44:32,355Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339869645) {}
[INFO ] 2020-04-19T23:44:32,357Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:44:32,372Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:32,374Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:44:32,386Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:32,386Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:44:32,386Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339871845) {}
[INFO ] 2020-04-19T23:44:32,386Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-19T23:44:32,390Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:44:32,390Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:44:32,397Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:44:32,397Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:44:32,760Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e5a4b83-ba35-49d3-84d7-8e2753094a66, invocation_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, invocation_timestamp=2020-04-19T23:44:32.445Z, origin=Only For Testing, session_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, session_timestamp=2020-04-19T23:44:32.445Z, thread-id=212}
[WARN ] 2020-04-19T23:44:32,760Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e5a4b83-ba35-49d3-84d7-8e2753094a66, invocation_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, invocation_timestamp=2020-04-19T23:44:32.445Z, origin=Only For Testing, session_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, session_timestamp=2020-04-19T23:44:32.445Z, thread-id=212}
[INFO ] 2020-04-19T23:44:33,701Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e5a4b83-ba35-49d3-84d7-8e2753094a66, invocation_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, invocation_timestamp=2020-04-19T23:44:32.445Z, origin=Only For Testing, session_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, session_timestamp=2020-04-19T23:44:32.445Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:33,701Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e5a4b83-ba35-49d3-84d7-8e2753094a66, invocation_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, invocation_timestamp=2020-04-19T23:44:32.445Z, origin=Only For Testing, session_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, session_timestamp=2020-04-19T23:44:32.445Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:33,944Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e5a4b83-ba35-49d3-84d7-8e2753094a66, invocation_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, invocation_timestamp=2020-04-19T23:44:32.445Z, origin=Only For Testing, session_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, session_timestamp=2020-04-19T23:44:32.445Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:34,205Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=deb3050c-569f-4390-8085-298be3660bd2, invocation_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, invocation_timestamp=2020-04-19T23:44:34.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, session_timestamp=2020-04-19T23:44:34.135Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:34,300Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=deb3050c-569f-4390-8085-298be3660bd2, invocation_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, invocation_timestamp=2020-04-19T23:44:34.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, session_timestamp=2020-04-19T23:44:34.135Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:34,310Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=deb3050c-569f-4390-8085-298be3660bd2, invocation_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, invocation_timestamp=2020-04-19T23:44:34.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, session_timestamp=2020-04-19T23:44:34.135Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:34,324Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=deb3050c-569f-4390-8085-298be3660bd2, invocation_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, invocation_timestamp=2020-04-19T23:44:34.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c76d7194-10c3-4569-9838-d002ddb0b0d8, session_timestamp=2020-04-19T23:44:34.135Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:34,382Z [Mock network] corda.flow. - Party O=PartyB, L=New York, C=US received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e5a4b83-ba35-49d3-84d7-8e2753094a66, invocation_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, invocation_timestamp=2020-04-19T23:44:32.445Z, origin=Only For Testing, session_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, session_timestamp=2020-04-19T23:44:32.445Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:44:34,382Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e5a4b83-ba35-49d3-84d7-8e2753094a66, invocation_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, invocation_timestamp=2020-04-19T23:44:32.445Z, origin=Only For Testing, session_id=8a69920e-c17d-409b-949c-bc8561e1bbd6, session_timestamp=2020-04-19T23:44:32.445Z, thread-id=212, tx_id=A12D8AD1CBA43C0683D7CF3E92756FD233C7EE1CB3414FC12AFC6947EABCC367}
[INFO ] 2020-04-19T23:45:00,327Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-19T23:45:00,844Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:45:04,332Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-19T23:45:04,363Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:45:04,421Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:04,432Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-19T23:45:04,433Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:04,433Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:45:04,433Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-19T23:45:04,446Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:45:04,450Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:45:04,508Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-19T23:45:04,571Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:45:04,572Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:45:04,604Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:45:04,605Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:45:04,605Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:45:04,764Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:45:04,764Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-19T23:45:04,775Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:45:04,776Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-19T23:45:04,785Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:45:04,785Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-19T23:45:04,817Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:45:04,817Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:04,827Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:45:04,838Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:04,838Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:45:04,839Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:04,849Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:45:04,878Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:04,878Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:45:04,878Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:04,892Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:04,929Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:04,929Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:45:04,929Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:04,999Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:45:05,016Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,016Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:45:05,016Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,017Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:45:05,183Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,184Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:45:05,193Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,193Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:45:05,194Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,232Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:45:05,233Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,252Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,253Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-19T23:45:05,275Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,276Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-19T23:45:05,292Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,293Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-19T23:45:05,294Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,300Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,300Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-19T23:45:05,376Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,376Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-19T23:45:05,376Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,376Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,387Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:45:05,399Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,400Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-19T23:45:05,421Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,432Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,432Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:45:05,432Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,444Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:45:05,445Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,445Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:45:05,446Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,446Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:45:05,495Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,496Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:45:05,496Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,496Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:45:05,496Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,508Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:45:05,508Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:45:05,508Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,519Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-19T23:45:05,531Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,531Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-19T23:45:05,543Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,543Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-19T23:45:05,543Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,543Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,543Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,606Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:45:05,617Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,617Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-19T23:45:05,639Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:45:05,640Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:05,640Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-19T23:45:05,641Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:45:05,647Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:45:05,664Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-19T23:45:05,664Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:45:05,698Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-19T23:45:06,024Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234450.831\nodes\0\cordapps] {}
[INFO ] 2020-04-19T23:45:06,032Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:45:06,046Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:45:06,194Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:45:07,586Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:45:07,665Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:45:07,803Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:45:07,804Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:45:08,090Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:44:50.708Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:45:15,046Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:15,054Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234450.831\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:15,054Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:15,143Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:15,386Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:15,400Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:18,630Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:19,562Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:19,565Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:19,571Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:19,572Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:19,724Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:19,856Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:45:19,900Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:45:19,900Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:45:20,266Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:45:20,286Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:45:20,286Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:20,297Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:45:20,545Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:20,655Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:45:20,689Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:20,741Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:20,779Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:45:20,792Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-19T23:45:20,800Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-19T23:45:21,434Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:21,472Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:21,475Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:21,476Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:21,476Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:21,500Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234450.831\nodes\1\cordapps] {}
[INFO ] 2020-04-19T23:45:21,501Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:45:21,502Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:45:21,513Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:45:21,573Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:45:21,576Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:45:21,638Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:45:21,638Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:45:21,642Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:44:50.708Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:45:22,750Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:22,757Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234450.831\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:22,757Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:22,821Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:22,827Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:22,827Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:23,186Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:23,212Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:23,216Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:23,224Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:23,225Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:23,358Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:23,371Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:45:23,377Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:45:23,377Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:45:23,558Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:45:23,560Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:45:23,590Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:45:23,590Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:23,592Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:45:23,602Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:23,613Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:45:23,620Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:23,627Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:23,663Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:45:23,682Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:23,690Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:23,720Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:45:23,746Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:23,752Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:45:23,774Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:23,775Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:23,775Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:23,775Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:23,792Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234450.831\nodes\2\cordapps] {}
[INFO ] 2020-04-19T23:45:23,794Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:45:23,794Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:45:23,810Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234450.831/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:45:23,850Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:45:23,853Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:45:23,904Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:45:23,905Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:45:23,909Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:44:50.708Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:45:24,851Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:24,854Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234450.831\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:24,854Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:24,909Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:24,922Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:24,922Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:25,163Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:25,178Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:25,180Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:25,185Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:25,185Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:25,278Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:45:25,288Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:45:25,289Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:45:25,290Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:45:25,444Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:45:25,447Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:45:25,483Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:45:25,483Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,486Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:45:25,494Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,503Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:45:25,508Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,514Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:25,550Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:45:25,563Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,570Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587339920286) {}
[INFO ] 2020-04-19T23:45:25,573Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:45:25,590Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,592Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:45:25,609Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587339923590) {}
[INFO ] 2020-04-19T23:45:25,611Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:45:25,626Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,629Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:45:25,642Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,642Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:45:25,643Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587339925483) {}
[INFO ] 2020-04-19T23:45:25,643Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-19T23:45:25,647Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:45:25,647Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:45:25,654Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:45:25,654Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:45:26,594Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=dd12158b-b828-4909-beba-d1b737166835, invocation_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, invocation_timestamp=2020-04-19T23:45:25.744Z, origin=Only For Testing, session_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, session_timestamp=2020-04-19T23:45:25.744Z, thread-id=207}
[WARN ] 2020-04-19T23:45:26,594Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=dd12158b-b828-4909-beba-d1b737166835, invocation_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, invocation_timestamp=2020-04-19T23:45:25.744Z, origin=Only For Testing, session_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, session_timestamp=2020-04-19T23:45:25.744Z, thread-id=207}
[INFO ] 2020-04-19T23:45:27,064Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=dd12158b-b828-4909-beba-d1b737166835, invocation_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, invocation_timestamp=2020-04-19T23:45:25.744Z, origin=Only For Testing, session_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, session_timestamp=2020-04-19T23:45:25.744Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,064Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=dd12158b-b828-4909-beba-d1b737166835, invocation_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, invocation_timestamp=2020-04-19T23:45:25.744Z, origin=Only For Testing, session_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, session_timestamp=2020-04-19T23:45:25.744Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,233Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=dd12158b-b828-4909-beba-d1b737166835, invocation_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, invocation_timestamp=2020-04-19T23:45:25.744Z, origin=Only For Testing, session_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, session_timestamp=2020-04-19T23:45:25.744Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,500Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=2811dd17-9965-4eb6-9f89-10088206f994, invocation_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, invocation_timestamp=2020-04-19T23:45:27.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, session_timestamp=2020-04-19T23:45:27.432Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,584Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=2811dd17-9965-4eb6-9f89-10088206f994, invocation_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, invocation_timestamp=2020-04-19T23:45:27.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, session_timestamp=2020-04-19T23:45:27.432Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,595Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=2811dd17-9965-4eb6-9f89-10088206f994, invocation_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, invocation_timestamp=2020-04-19T23:45:27.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, session_timestamp=2020-04-19T23:45:27.432Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,609Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=2811dd17-9965-4eb6-9f89-10088206f994, invocation_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, invocation_timestamp=2020-04-19T23:45:27.432Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3699ba31-e4f4-43f4-bcfd-f7d15e1c4384, session_timestamp=2020-04-19T23:45:27.432Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,667Z [Mock network] corda.flow. - Party O=PartyB, L=New York, C=US received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=dd12158b-b828-4909-beba-d1b737166835, invocation_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, invocation_timestamp=2020-04-19T23:45:25.744Z, origin=Only For Testing, session_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, session_timestamp=2020-04-19T23:45:25.744Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:45:27,667Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=dd12158b-b828-4909-beba-d1b737166835, invocation_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, invocation_timestamp=2020-04-19T23:45:25.744Z, origin=Only For Testing, session_id=427eff88-3b75-479d-83b3-6d4b234fc4d6, session_timestamp=2020-04-19T23:45:25.744Z, thread-id=207, tx_id=6643DCA2CED53E03AE1A3697031FE284597024C9550804061BE67669F72946A5}
[INFO ] 2020-04-19T23:46:57,866Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-19T23:46:58,416Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:47:01,942Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:47:05,646Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-19T23:47:05,671Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:47:05,691Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:47:06,445Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:06,476Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-19T23:47:07,119Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:07,130Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:47:07,130Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-19T23:47:07,384Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:47:07,405Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:47:08,138Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-19T23:47:08,744Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:47:08,755Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:47:08,787Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:47:08,797Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:47:08,797Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:47:10,115Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:47:10,115Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-19T23:47:10,266Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:47:10,266Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-19T23:47:10,297Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:47:10,297Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-19T23:47:10,380Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:47:10,380Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:10,570Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:47:10,580Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:10,580Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:47:10,580Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:10,601Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:47:10,612Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:10,612Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:47:10,612Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:10,622Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:10,664Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:10,664Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:47:10,665Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:10,748Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:47:10,769Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:10,769Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:47:10,769Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:10,769Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:47:11,067Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,067Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:47:11,067Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,595Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:47:11,595Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,627Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:47:11,627Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,658Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,658Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-19T23:47:11,668Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,668Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-19T23:47:11,668Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,668Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-19T23:47:11,668Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,668Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,678Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-19T23:47:11,761Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,761Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-19T23:47:11,782Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,782Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,782Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:47:11,803Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,803Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-19T23:47:11,823Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,834Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,835Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:47:11,835Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,844Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:47:11,855Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,855Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:47:11,855Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,855Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:47:11,897Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,897Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:47:11,897Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,897Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:47:11,897Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,897Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:47:11,898Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:47:11,907Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,908Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-19T23:47:11,918Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,918Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-19T23:47:11,929Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,929Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-19T23:47:11,929Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,929Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,929Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-19T23:47:11,972Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,972Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:47:11,972Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,972Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:47:11,972Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,973Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:47:11,973Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:47:11,973Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:11,982Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:47:11,997Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:12,008Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-19T23:47:12,030Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:47:12,040Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:12,051Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-19T23:47:12,051Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:47:12,058Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:47:12,088Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-19T23:47:12,088Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:47:12,125Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-19T23:47:12,414Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234648.934\nodes\0\cordapps] {}
[INFO ] 2020-04-19T23:47:12,425Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:47:12,438Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:47:12,572Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:47:13,857Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:47:13,944Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:47:14,074Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:47:14,075Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:47:14,775Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:46:48.831Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:47:20,577Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:20,583Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234648.934\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:20,583Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:20,662Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:20,898Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:20,908Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:24,133Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:25,108Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:25,124Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:25,133Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:25,134Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:25,260Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:25,347Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:47:25,384Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:47:25,384Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:47:25,730Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:47:25,756Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:47:25,756Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:25,769Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:47:26,032Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:26,115Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:47:26,152Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:26,197Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:26,233Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:47:26,243Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-19T23:47:26,247Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-19T23:47:26,859Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:26,908Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:26,932Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:26,933Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:26,933Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:26,957Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234648.934\nodes\1\cordapps] {}
[INFO ] 2020-04-19T23:47:26,958Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:47:26,958Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:47:26,975Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:47:27,030Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:47:27,032Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:47:27,080Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:47:27,080Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:47:27,085Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:46:48.831Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:47:28,120Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,124Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234648.934\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,124Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,170Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,174Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,174Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,435Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,454Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,457Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,463Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,463Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,564Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:28,575Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:47:28,580Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:47:28,580Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:47:28,757Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:47:28,758Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:47:28,787Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:47:28,787Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:28,802Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:47:28,812Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:28,822Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:47:28,828Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:28,835Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:28,865Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:47:28,876Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:28,882Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:28,884Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:47:28,897Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:28,899Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:47:28,913Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:28,913Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:28,914Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:28,914Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:28,927Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-234648.934\nodes\2\cordapps] {}
[INFO ] 2020-04-19T23:47:28,928Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:47:28,928Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:47:28,940Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-234648.934/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:47:28,969Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:47:28,973Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:47:29,008Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:47:29,008Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:47:29,012Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:46:48.831Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:47:29,902Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:29,906Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-234648.934\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:29,906Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:29,965Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:29,971Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:29,971Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:30,172Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:30,183Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:30,185Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:30,189Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:30,189Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:30,264Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:47:30,272Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:47:30,274Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:47:30,274Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:47:30,410Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:47:30,412Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:47:30,439Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:47:30,439Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:30,441Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:47:30,450Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:30,458Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:47:30,464Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:30,470Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:30,501Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:47:31,046Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:31,051Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340045756) {}
[INFO ] 2020-04-19T23:47:31,055Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:47:31,066Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:31,068Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:47:31,079Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340048787) {}
[INFO ] 2020-04-19T23:47:31,081Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:47:31,096Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:31,098Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:47:31,113Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:31,113Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:47:31,114Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340050439) {}
[INFO ] 2020-04-19T23:47:31,114Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-19T23:47:31,119Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:47:31,119Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:47:31,127Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-19T23:47:31,127Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-19T23:47:31,127Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:47:31,127Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:47:31,128Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-19T23:47:31,128Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-19T23:47:31,472Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3adddc59-19b4-45a3-934c-4ae8f27ede35, invocation_id=6ecf8664-872d-47f8-88c6-b93041faff1e, invocation_timestamp=2020-04-19T23:47:31.184Z, origin=Only For Testing, session_id=6ecf8664-872d-47f8-88c6-b93041faff1e, session_timestamp=2020-04-19T23:47:31.184Z, thread-id=212}
[WARN ] 2020-04-19T23:47:31,472Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3adddc59-19b4-45a3-934c-4ae8f27ede35, invocation_id=6ecf8664-872d-47f8-88c6-b93041faff1e, invocation_timestamp=2020-04-19T23:47:31.184Z, origin=Only For Testing, session_id=6ecf8664-872d-47f8-88c6-b93041faff1e, session_timestamp=2020-04-19T23:47:31.184Z, thread-id=212}
[INFO ] 2020-04-19T23:47:31,944Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3adddc59-19b4-45a3-934c-4ae8f27ede35, invocation_id=6ecf8664-872d-47f8-88c6-b93041faff1e, invocation_timestamp=2020-04-19T23:47:31.184Z, origin=Only For Testing, session_id=6ecf8664-872d-47f8-88c6-b93041faff1e, session_timestamp=2020-04-19T23:47:31.184Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:31,944Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3adddc59-19b4-45a3-934c-4ae8f27ede35, invocation_id=6ecf8664-872d-47f8-88c6-b93041faff1e, invocation_timestamp=2020-04-19T23:47:31.184Z, origin=Only For Testing, session_id=6ecf8664-872d-47f8-88c6-b93041faff1e, session_timestamp=2020-04-19T23:47:31.184Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:32,126Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3adddc59-19b4-45a3-934c-4ae8f27ede35, invocation_id=6ecf8664-872d-47f8-88c6-b93041faff1e, invocation_timestamp=2020-04-19T23:47:31.184Z, origin=Only For Testing, session_id=6ecf8664-872d-47f8-88c6-b93041faff1e, session_timestamp=2020-04-19T23:47:31.184Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:32,404Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=109a320c-b820-4143-8890-47f2f5a5d457, invocation_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, invocation_timestamp=2020-04-19T23:47:32.326Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, session_timestamp=2020-04-19T23:47:32.326Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:32,475Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=109a320c-b820-4143-8890-47f2f5a5d457, invocation_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, invocation_timestamp=2020-04-19T23:47:32.326Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, session_timestamp=2020-04-19T23:47:32.326Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:32,486Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=109a320c-b820-4143-8890-47f2f5a5d457, invocation_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, invocation_timestamp=2020-04-19T23:47:32.326Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, session_timestamp=2020-04-19T23:47:32.326Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:32,497Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=109a320c-b820-4143-8890-47f2f5a5d457, invocation_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, invocation_timestamp=2020-04-19T23:47:32.326Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a5dd304-1c99-4d90-92d5-1a0aa8257443, session_timestamp=2020-04-19T23:47:32.326Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:32,556Z [Mock network] corda.flow. - Party O=PartyB, L=New York, C=US received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3adddc59-19b4-45a3-934c-4ae8f27ede35, invocation_id=6ecf8664-872d-47f8-88c6-b93041faff1e, invocation_timestamp=2020-04-19T23:47:31.184Z, origin=Only For Testing, session_id=6ecf8664-872d-47f8-88c6-b93041faff1e, session_timestamp=2020-04-19T23:47:31.184Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[INFO ] 2020-04-19T23:47:32,556Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3adddc59-19b4-45a3-934c-4ae8f27ede35, invocation_id=6ecf8664-872d-47f8-88c6-b93041faff1e, invocation_timestamp=2020-04-19T23:47:31.184Z, origin=Only For Testing, session_id=6ecf8664-872d-47f8-88c6-b93041faff1e, session_timestamp=2020-04-19T23:47:31.184Z, thread-id=212, tx_id=BDBE5E0682F2939F8F3740FDD403BCD216D674838D0DFD436077E35735A0396A}
[ERROR] 2020-04-19T23:47:32,723Z [Mock network] internal.Verifier. - Error validating transaction 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD. [errorCode=vgqbdz, moreInformationAt=https://errors.corda.net/OS/4.4/vgqbdz] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at com.template.contracts.QAContract.verify(QAContract.kt:39) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
[ERROR] 2020-04-19T23:47:32,734Z [Mock network] internal.Verifier. - Error validating transaction 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD. [errorCode=vgqbdz, moreInformationAt=https://errors.corda.net/OS/4.4/vgqbdz] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at com.template.contracts.QAContract.verify(QAContract.kt:39) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
[INFO ] 2020-04-19T23:47:32,734Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
[INFO ] 2020-04-19T23:47:32,744Z [Mock network] statemachine.StaffedFlowHospital. - Flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Invocation, sessionId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8B7E2A624129FB3430DB2BD6AA0A9A64395AF240EAA0C89DB7D52BAF4F9B51B8), errorState=Clean, numberOfSuspends=0), flowLogic=com.template.flows.AnswerInitiator@1c7647bd, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=5ab37e88-fcb8-4da2-b9ff-fccea4c42b30) {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
[INFO ] 2020-04-19T23:47:32,753Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at com.template.contracts.QAContract.verify(QAContract.kt:39) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[INFO ] 2020-04-19T23:47:32,761Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at com.template.contracts.QAContract.verify(QAContract.kt:39) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:47:32,799Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] errored, dumping all transitions:

 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.592Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d5eddef1-0ce2-4666-9937-7321f7c14cf1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Invocation, sessionId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8B7E2A624129FB3430DB2BD6AA0A9A64395AF240EAA0C89DB7D52BAF4F9B51B8), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7fc1eabe])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7fc1eabe])
    SignalFlowHasStarted(flowId=[d5eddef1-0ce2-4666-9937-7321f7c14cf1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7fc1eabe]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.764Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-19T23:47:32.587Z
    2020-04-19T23:47:32.742Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8250580450702928911, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD)], propagatedIndex=0, propagating=false)


 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.777Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.780Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:47:32.742Z
    2020-04-19T23:47:32.780Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
[WARN ] 2020-04-19T23:47:32,799Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] error [errorCode=1hwlz44, moreInformationAt=https://errors.corda.net/OS/4.4/1hwlz44] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at com.template.contracts.QAContract.verify(QAContract.kt:39) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:47:32,804Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=1hwlz44, moreInformationAt=https://errors.corda.net/OS/4.4/1hwlz44] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at com.template.contracts.QAContract.verify(QAContract.kt:39) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:47:32,835Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] errored, dumping all transitions:

 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.592Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d5eddef1-0ce2-4666-9937-7321f7c14cf1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Invocation, sessionId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8B7E2A624129FB3430DB2BD6AA0A9A64395AF240EAA0C89DB7D52BAF4F9B51B8), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7fc1eabe])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7fc1eabe])
    SignalFlowHasStarted(flowId=[d5eddef1-0ce2-4666-9937-7321f7c14cf1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7fc1eabe]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.764Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-19T23:47:32.587Z
    2020-04-19T23:47:32.742Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8250580450702928911, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD)], propagatedIndex=0, propagating=false)


 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.777Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.780Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:47:32.742Z
    2020-04-19T23:47:32.780Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] ---
  Timestamp: 2020-04-19T23:47:32.826Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD, errorId=8250580450702928911)], sessions=[], senderUUID=5ab37e88-fcb8-4da2-b9ff-fccea4c42b30)
    CreateTransaction
    RemoveCheckpoint(id=[d5eddef1-0ce2-4666-9937-7321f7c14cf1])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=d5eddef1-0ce2-4666-9937-7321f7c14cf1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[d5eddef1-0ce2-4666-9937-7321f7c14cf1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8250580450702928911, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Invocation, sessionId=4cd398ee-29f5-420c-a93c-73eaaebc8f85, timestamp: 2020-04-19T23:47:32.584Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8B7E2A624129FB3430DB2BD6AA0A9A64395AF240EAA0C89DB7D52BAF4F9B51B8), errorState=Errored(errors=[FlowError(errorId=8250580450702928911, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=com.template.flows.AnswerInitiator@1c7647bd, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=5ab37e88-fcb8-4da2-b9ff-fccea4c42b30))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:47:32.780Z
    2020-04-19T23:47:32.800Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
[WARN ] 2020-04-19T23:47:32,835Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d5eddef1-0ce2-4666-9937-7321f7c14cf1] error [errorCode=1hwlz44, moreInformationAt=https://errors.corda.net/OS/4.4/1hwlz44] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=d5eddef1-0ce2-4666-9937-7321f7c14cf1, invocation_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, invocation_timestamp=2020-04-19T23:47:32.584Z, origin=Only For Testing, session_id=4cd398ee-29f5-420c-a93c-73eaaebc8f85, session_timestamp=2020-04-19T23:47:32.584Z, thread-id=212}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: List has more than one element., contract: com.template.contracts.QAContract, transaction: 05BDD13E1D607F15AE40E4155172E8E0AA5DB79A9CC846D164B9C98850048FCD
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at com.template.contracts.QAContract.verify(QAContract.kt:39) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[INFO ] 2020-04-19T23:50:46,179Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-19T23:50:46,795Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:50:50,773Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:50:54,314Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-19T23:50:54,798Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:50:54,800Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:50:55,559Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:50:55,600Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-19T23:50:56,226Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:50:56,236Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:50:56,236Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-19T23:50:56,500Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:50:56,536Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:50:57,359Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-19T23:50:57,957Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:50:57,957Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:50:57,999Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:50:58,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:50:58,000Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:50:59,381Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:50:59,381Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-19T23:50:59,538Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:50:59,538Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-19T23:50:59,569Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:50:59,569Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-19T23:50:59,655Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:50:59,655Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:50:59,870Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:50:59,891Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:50:59,891Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:50:59,891Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:50:59,891Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:50:59,912Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:50:59,912Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:50:59,912Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:50:59,932Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:50:59,985Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:00,024Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:51:00,026Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:00,127Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:51:00,147Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:00,147Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:51:00,147Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:00,147Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:51:00,449Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:00,449Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:51:00,449Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,061Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:51:01,061Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,094Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:51:01,094Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,125Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,125Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-19T23:51:01,134Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,134Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-19T23:51:01,134Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,134Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-19T23:51:01,134Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,134Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,144Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-19T23:51:01,229Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,229Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-19T23:51:01,249Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,249Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,249Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:51:01,274Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,274Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-19T23:51:01,305Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,305Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,305Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:51:01,305Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,318Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:51:01,329Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,329Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:51:01,330Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,330Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:51:01,373Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,374Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:51:01,374Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,374Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:51:01,374Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,389Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:51:01,391Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:51:01,407Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,407Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-19T23:51:01,417Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,418Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-19T23:51:01,442Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,442Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-19T23:51:01,443Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,443Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,443Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-19T23:51:01,498Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,498Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:51:01,498Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,498Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:51:01,498Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,498Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:51:01,508Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:51:01,509Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,509Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:51:01,518Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,518Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-19T23:51:01,552Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:51:01,563Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:51:01,573Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-19T23:51:01,573Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:51:01,583Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:51:01,610Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-19T23:51:01,610Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:51:01,656Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-19T23:51:01,971Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-235034.473\nodes\0\cordapps] {}
[INFO ] 2020-04-19T23:51:01,982Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:51:02,001Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:51:02,193Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:51:03,565Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:51:03,640Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:51:03,782Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:51:03,783Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:51:04,049Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:50:34.344Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:51:11,110Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:11,117Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-235034.473\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:11,117Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:11,219Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:11,436Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:11,447Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:15,433Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:16,502Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:16,505Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:16,513Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:16,513Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:16,664Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:16,749Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:51:16,793Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:51:16,793Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:51:17,227Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:51:17,247Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:51:17,247Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:17,257Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:51:17,522Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:17,619Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:51:17,653Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:17,704Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:17,740Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:51:17,751Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-19T23:51:17,757Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-19T23:51:18,466Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:18,515Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:18,520Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:18,522Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:18,522Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:18,546Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-235034.473\nodes\1\cordapps] {}
[INFO ] 2020-04-19T23:51:18,548Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:51:18,548Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:51:18,561Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:51:18,608Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:51:18,611Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:51:18,665Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:51:18,665Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:51:18,671Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:50:34.344Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:51:19,792Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:19,805Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-235034.473\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:19,805Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:19,904Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:19,911Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:19,911Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:20,282Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:20,349Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:20,351Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:20,358Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:20,359Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:20,476Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:20,486Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:51:20,490Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:51:20,490Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:51:20,661Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:51:20,662Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:51:20,698Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:51:20,698Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:20,702Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:51:20,713Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:20,726Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:51:20,733Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:20,742Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:20,788Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:51:20,805Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:20,813Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:20,817Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:51:20,835Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:20,837Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:51:20,855Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:20,855Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:20,856Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:20,856Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:20,876Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-235034.473\nodes\2\cordapps] {}
[INFO ] 2020-04-19T23:51:20,877Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:51:20,877Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:51:20,891Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235034.473/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:51:20,932Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:51:20,935Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:51:20,973Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:51:20,973Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:51:20,977Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:50:34.344Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:51:21,906Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:21,910Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-235034.473\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:21,910Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:21,954Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,012Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,012Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,159Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,171Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,173Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,177Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,178Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,279Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:51:22,291Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:51:22,294Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:51:22,294Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:51:22,475Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:51:22,477Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:51:22,527Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:51:22,527Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,530Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:51:22,539Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,551Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:51:22,557Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,565Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:22,615Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=9CC5AFA089A0B24A2472BB86F0B00C5AB2BBD2AF52C5EC712C0F41FC90624EAE uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:51:22,625Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,630Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340277247) {}
[INFO ] 2020-04-19T23:51:22,632Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:51:22,645Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,647Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:51:22,661Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340280698) {}
[INFO ] 2020-04-19T23:51:22,663Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:51:22,675Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,677Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:51:22,687Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,687Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:51:22,688Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340282527) {}
[INFO ] 2020-04-19T23:51:22,688Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-19T23:51:22,690Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:51:22,690Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:51:22,698Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-19T23:51:22,698Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-19T23:51:22,699Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:51:22,699Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:51:22,699Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-19T23:51:22,699Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-19T23:51:23,170Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3958d9f0-0de4-48e6-a884-94ece626550c, invocation_id=3f711631-0aa4-42c5-916f-b0445a08562e, invocation_timestamp=2020-04-19T23:51:22.767Z, origin=Only For Testing, session_id=3f711631-0aa4-42c5-916f-b0445a08562e, session_timestamp=2020-04-19T23:51:22.767Z, thread-id=214}
[WARN ] 2020-04-19T23:51:23,170Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3958d9f0-0de4-48e6-a884-94ece626550c, invocation_id=3f711631-0aa4-42c5-916f-b0445a08562e, invocation_timestamp=2020-04-19T23:51:22.767Z, origin=Only For Testing, session_id=3f711631-0aa4-42c5-916f-b0445a08562e, session_timestamp=2020-04-19T23:51:22.767Z, thread-id=214}
[INFO ] 2020-04-19T23:51:23,758Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3958d9f0-0de4-48e6-a884-94ece626550c, invocation_id=3f711631-0aa4-42c5-916f-b0445a08562e, invocation_timestamp=2020-04-19T23:51:22.767Z, origin=Only For Testing, session_id=3f711631-0aa4-42c5-916f-b0445a08562e, session_timestamp=2020-04-19T23:51:22.767Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:23,758Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3958d9f0-0de4-48e6-a884-94ece626550c, invocation_id=3f711631-0aa4-42c5-916f-b0445a08562e, invocation_timestamp=2020-04-19T23:51:22.767Z, origin=Only For Testing, session_id=3f711631-0aa4-42c5-916f-b0445a08562e, session_timestamp=2020-04-19T23:51:22.767Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:23,932Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3958d9f0-0de4-48e6-a884-94ece626550c, invocation_id=3f711631-0aa4-42c5-916f-b0445a08562e, invocation_timestamp=2020-04-19T23:51:22.767Z, origin=Only For Testing, session_id=3f711631-0aa4-42c5-916f-b0445a08562e, session_timestamp=2020-04-19T23:51:22.767Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:24,238Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=d5f7f16d-fc69-400b-9b9e-ec5ac220379f, invocation_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, invocation_timestamp=2020-04-19T23:51:24.154Z, origin=O=Mock Company 1, L=London, C=GB, session_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, session_timestamp=2020-04-19T23:51:24.154Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:24,411Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=d5f7f16d-fc69-400b-9b9e-ec5ac220379f, invocation_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, invocation_timestamp=2020-04-19T23:51:24.154Z, origin=O=Mock Company 1, L=London, C=GB, session_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, session_timestamp=2020-04-19T23:51:24.154Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:24,423Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=d5f7f16d-fc69-400b-9b9e-ec5ac220379f, invocation_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, invocation_timestamp=2020-04-19T23:51:24.154Z, origin=O=Mock Company 1, L=London, C=GB, session_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, session_timestamp=2020-04-19T23:51:24.154Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:24,437Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=d5f7f16d-fc69-400b-9b9e-ec5ac220379f, invocation_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, invocation_timestamp=2020-04-19T23:51:24.154Z, origin=O=Mock Company 1, L=London, C=GB, session_id=07239cd3-a1e4-4dd0-afd5-4d93be2c0fd8, session_timestamp=2020-04-19T23:51:24.154Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:24,500Z [Mock network] corda.flow. - Party O=PartyB, L=New York, C=US received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3958d9f0-0de4-48e6-a884-94ece626550c, invocation_id=3f711631-0aa4-42c5-916f-b0445a08562e, invocation_timestamp=2020-04-19T23:51:22.767Z, origin=Only For Testing, session_id=3f711631-0aa4-42c5-916f-b0445a08562e, session_timestamp=2020-04-19T23:51:22.767Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:51:24,500Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3958d9f0-0de4-48e6-a884-94ece626550c, invocation_id=3f711631-0aa4-42c5-916f-b0445a08562e, invocation_timestamp=2020-04-19T23:51:22.767Z, origin=Only For Testing, session_id=3f711631-0aa4-42c5-916f-b0445a08562e, session_timestamp=2020-04-19T23:51:22.767Z, thread-id=214, tx_id=E0AB6977B6FB6BD04FEC0A93BD44472D7CDB82718878F7F687D5370FE355D479}
[INFO ] 2020-04-19T23:56:11,309Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-19T23:56:11,829Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:56:15,683Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:56:19,290Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-19T23:56:19,315Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-19T23:56:19,316Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:56:20,069Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:20,109Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-19T23:56:20,755Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:20,755Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:56:20,755Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-19T23:56:21,025Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:56:21,046Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:56:21,831Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-19T23:56:22,459Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:56:22,480Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:56:22,513Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:56:22,513Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-19T23:56:22,513Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-19T23:56:23,900Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:56:23,900Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-19T23:56:24,058Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:56:24,059Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-19T23:56:24,101Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:56:24,101Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-19T23:56:24,195Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-19T23:56:24,195Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:24,417Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:56:24,427Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:24,427Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:56:24,427Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:24,443Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:56:24,465Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:24,465Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:56:24,465Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:24,487Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:24,540Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:24,551Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:56:24,552Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:24,649Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:56:24,659Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:24,659Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:56:24,659Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:24,659Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:56:24,943Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:24,943Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:56:24,964Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,510Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-19T23:56:25,510Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,553Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:56:25,553Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,596Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,596Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-19T23:56:25,606Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,607Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-19T23:56:25,616Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,616Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-19T23:56:25,616Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,617Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:25,627Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-19T23:56:25,723Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:25,723Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-19T23:56:25,733Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:25,743Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,755Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:56:25,786Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,787Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-19T23:56:25,815Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,826Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,826Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-19T23:56:25,827Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,872Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:56:25,872Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,873Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:56:25,873Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,873Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:56:25,919Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,919Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:56:25,919Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,930Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-19T23:56:25,930Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,930Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-19T23:56:25,930Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-19T23:56:25,940Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,940Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-19T23:56:25,951Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,951Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-19T23:56:25,961Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,961Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-19T23:56:25,961Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:25,961Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:25,962Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-19T23:56:26,015Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:26,016Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:56:26,030Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:26,030Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:56:26,030Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:26,030Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-19T23:56:26,030Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-19T23:56:26,030Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:26,030Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-19T23:56:26,055Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:26,055Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-19T23:56:26,083Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-19T23:56:26,094Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:26,105Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-19T23:56:26,105Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-19T23:56:26,123Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:56:26,140Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-19T23:56:26,140Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-19T23:56:26,178Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-19T23:56:26,517Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-235602.342\nodes\0\cordapps] {}
[INFO ] 2020-04-19T23:56:26,528Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:56:26,546Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:56:26,716Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:56:28,093Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:56:28,182Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:56:28,304Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:56:28,305Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:56:29,072Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:56:02.229Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:56:35,617Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:35,627Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-235602.342\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:35,627Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:35,695Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:35,907Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:35,914Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:39,115Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:40,036Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:40,040Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:40,048Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:40,048Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:40,172Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:40,256Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:56:40,285Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:56:40,285Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:56:40,669Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-19T23:56:40,689Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:56:40,689Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:40,698Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:56:40,997Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:41,083Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:56:41,116Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:41,161Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:41,200Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=F990DF2AF89DBAC2B30EB26A0EB61E5539D8B94B7219983A7ABEED73FE556FF9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:56:41,211Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-19T23:56:41,216Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-19T23:56:41,857Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:41,894Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:41,898Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:41,900Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:41,900Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:41,922Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-235602.342\nodes\1\cordapps] {}
[INFO ] 2020-04-19T23:56:41,923Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:56:41,923Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:56:41,936Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:56:42,000Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:56:42,003Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:56:42,055Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:56:42,056Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:56:42,061Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:56:02.229Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:56:43,321Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,325Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-235602.342\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,325Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,387Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,395Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,395Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,651Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,670Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,672Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,678Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,678Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,812Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:43,834Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:56:43,842Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:56:43,842Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:56:44,046Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:56:44,050Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:56:44,097Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:56:44,097Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:44,131Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:56:44,150Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:44,162Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:56:44,169Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:44,182Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:44,226Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=F990DF2AF89DBAC2B30EB26A0EB61E5539D8B94B7219983A7ABEED73FE556FF9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:56:44,245Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:44,250Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:44,254Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:56:44,275Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:44,278Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:56:44,298Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:44,298Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:44,299Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:44,300Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:44,320Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200419-235602.342\nodes\2\cordapps] {}
[INFO ] 2020-04-19T23:56:44,321Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-19T23:56:44,321Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-19T23:56:44,344Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200419-235602.342/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-19T23:56:44,415Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-19T23:56:44,419Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-19T23:56:44,472Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-19T23:56:44,472Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-19T23:56:44,477Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-19T23:56:02.229Z
      epoch=1
  } {}
[INFO ] 2020-04-19T23:56:45,459Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,463Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200419-235602.342\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,463Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,512Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,523Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,523Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,765Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,777Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,780Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,784Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,784Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,873Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-19T23:56:45,886Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-19T23:56:45,889Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:56:45,889Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:56:46,056Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-19T23:56:46,058Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-19T23:56:46,087Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-19T23:56:46,087Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,090Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:56:46,101Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,111Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-19T23:56:46,685Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,697Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:46,762Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=F990DF2AF89DBAC2B30EB26A0EB61E5539D8B94B7219983A7ABEED73FE556FF9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-19T23:56:46,775Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,779Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587340600689) {}
[INFO ] 2020-04-19T23:56:46,782Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-19T23:56:46,798Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,800Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:56:46,813Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587340604097) {}
[INFO ] 2020-04-19T23:56:46,815Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-19T23:56:46,827Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,829Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-19T23:56:46,840Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,840Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-19T23:56:46,840Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587340606087) {}
[INFO ] 2020-04-19T23:56:46,840Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-19T23:56:46,844Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:56:46,844Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:56:46,851Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-19T23:56:46,851Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-19T23:56:46,851Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-19T23:56:46,851Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-19T23:56:46,851Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-19T23:56:46,851Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-19T23:56:47,219Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6e30efd1-6d27-43ae-8c73-7913354aa066, invocation_id=59853467-9fbc-4217-a40d-e808a998c1b4, invocation_timestamp=2020-04-19T23:56:46.904Z, origin=Only For Testing, session_id=59853467-9fbc-4217-a40d-e808a998c1b4, session_timestamp=2020-04-19T23:56:46.904Z, thread-id=211}
[WARN ] 2020-04-19T23:56:47,219Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6e30efd1-6d27-43ae-8c73-7913354aa066, invocation_id=59853467-9fbc-4217-a40d-e808a998c1b4, invocation_timestamp=2020-04-19T23:56:46.904Z, origin=Only For Testing, session_id=59853467-9fbc-4217-a40d-e808a998c1b4, session_timestamp=2020-04-19T23:56:46.904Z, thread-id=211}
[INFO ] 2020-04-19T23:56:47,653Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6e30efd1-6d27-43ae-8c73-7913354aa066, invocation_id=59853467-9fbc-4217-a40d-e808a998c1b4, invocation_timestamp=2020-04-19T23:56:46.904Z, origin=Only For Testing, session_id=59853467-9fbc-4217-a40d-e808a998c1b4, session_timestamp=2020-04-19T23:56:46.904Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:47,653Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6e30efd1-6d27-43ae-8c73-7913354aa066, invocation_id=59853467-9fbc-4217-a40d-e808a998c1b4, invocation_timestamp=2020-04-19T23:56:46.904Z, origin=Only For Testing, session_id=59853467-9fbc-4217-a40d-e808a998c1b4, session_timestamp=2020-04-19T23:56:46.904Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:47,815Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6e30efd1-6d27-43ae-8c73-7913354aa066, invocation_id=59853467-9fbc-4217-a40d-e808a998c1b4, invocation_timestamp=2020-04-19T23:56:46.904Z, origin=Only For Testing, session_id=59853467-9fbc-4217-a40d-e808a998c1b4, session_timestamp=2020-04-19T23:56:46.904Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:48,081Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=47c0fdf6-0158-4935-9949-0cfc4b6e1a72, invocation_id=da56eb86-366b-4499-aa47-f922d600fc78, invocation_timestamp=2020-04-19T23:56:48.008Z, origin=O=Mock Company 1, L=London, C=GB, session_id=da56eb86-366b-4499-aa47-f922d600fc78, session_timestamp=2020-04-19T23:56:48.008Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:48,149Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=47c0fdf6-0158-4935-9949-0cfc4b6e1a72, invocation_id=da56eb86-366b-4499-aa47-f922d600fc78, invocation_timestamp=2020-04-19T23:56:48.008Z, origin=O=Mock Company 1, L=London, C=GB, session_id=da56eb86-366b-4499-aa47-f922d600fc78, session_timestamp=2020-04-19T23:56:48.008Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:48,159Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=47c0fdf6-0158-4935-9949-0cfc4b6e1a72, invocation_id=da56eb86-366b-4499-aa47-f922d600fc78, invocation_timestamp=2020-04-19T23:56:48.008Z, origin=O=Mock Company 1, L=London, C=GB, session_id=da56eb86-366b-4499-aa47-f922d600fc78, session_timestamp=2020-04-19T23:56:48.008Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:48,175Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=47c0fdf6-0158-4935-9949-0cfc4b6e1a72, invocation_id=da56eb86-366b-4499-aa47-f922d600fc78, invocation_timestamp=2020-04-19T23:56:48.008Z, origin=O=Mock Company 1, L=London, C=GB, session_id=da56eb86-366b-4499-aa47-f922d600fc78, session_timestamp=2020-04-19T23:56:48.008Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:48,228Z [Mock network] corda.flow. - Party O=PartyB, L=New York, C=US received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6e30efd1-6d27-43ae-8c73-7913354aa066, invocation_id=59853467-9fbc-4217-a40d-e808a998c1b4, invocation_timestamp=2020-04-19T23:56:46.904Z, origin=Only For Testing, session_id=59853467-9fbc-4217-a40d-e808a998c1b4, session_timestamp=2020-04-19T23:56:46.904Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[INFO ] 2020-04-19T23:56:48,228Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6e30efd1-6d27-43ae-8c73-7913354aa066, invocation_id=59853467-9fbc-4217-a40d-e808a998c1b4, invocation_timestamp=2020-04-19T23:56:46.904Z, origin=Only For Testing, session_id=59853467-9fbc-4217-a40d-e808a998c1b4, session_timestamp=2020-04-19T23:56:46.904Z, thread-id=211, tx_id=BBB41A32A0F2D5623541190FC9280657F42383D0F7BB3ACAF90F2CFC7BFFF652}
[ERROR] 2020-04-19T23:56:48,401Z [Mock network] internal.Verifier. - Error validating transaction 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E. [errorCode=azjnpq, moreInformationAt=https://errors.corda.net/OS/4.4/azjnpq] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
java.lang.IllegalArgumentException: Failed requirement: The Respondent property must change in a transfer.
	at com.template.contracts.QAContract.verify(QAContract.kt:92) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
[ERROR] 2020-04-19T23:56:48,408Z [Mock network] internal.Verifier. - Error validating transaction 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E. [errorCode=azjnpq, moreInformationAt=https://errors.corda.net/OS/4.4/azjnpq] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
java.lang.IllegalArgumentException: Failed requirement: The Respondent property must change in a transfer.
	at com.template.contracts.QAContract.verify(QAContract.kt:92) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
[INFO ] 2020-04-19T23:56:48,408Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
[INFO ] 2020-04-19T23:56:48,415Z [Mock network] statemachine.StaffedFlowHospital. - Flow [645b659f-016d-4c97-ba0c-b7689f887848] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Invocation, sessionId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=621F9DD6C38127FAB8C1FFBE847B3E42C138A244F2121DFCECCE24E84D8D5645), errorState=Clean, numberOfSuspends=0), flowLogic=com.template.flows.AnswerInitiator@3ab7d454, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=bee05586-8542-4eea-a5b8-a405b1d657bc) {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
[INFO ] 2020-04-19T23:56:48,420Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The Respondent property must change in a transfer.
	at com.template.contracts.QAContract.verify(QAContract.kt:92) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[INFO ] 2020-04-19T23:56:48,427Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The Respondent property must change in a transfer.
	at com.template.contracts.QAContract.verify(QAContract.kt:92) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:56:48,463Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [645b659f-016d-4c97-ba0c-b7689f887848] errored, dumping all transitions:

 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.264Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[645b659f-016d-4c97-ba0c-b7689f887848], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Invocation, sessionId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=621F9DD6C38127FAB8C1FFBE847B3E42C138A244F2121DFCECCE24E84D8D5645), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@477ffa4c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@477ffa4c])
    SignalFlowHasStarted(flowId=[645b659f-016d-4c97-ba0c-b7689f887848])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@477ffa4c]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.429Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:56:48.258Z
    2020-04-19T23:56:48.414Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6478881686233892138, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.438Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.442Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:56:48.414Z
    2020-04-19T23:56:48.442Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
[WARN ] 2020-04-19T23:56:48,463Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [645b659f-016d-4c97-ba0c-b7689f887848] error [errorCode=xffbfv, moreInformationAt=https://errors.corda.net/OS/4.4/xffbfv] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The Respondent property must change in a transfer.
	at com.template.contracts.QAContract.verify(QAContract.kt:92) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:56:48,466Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=xffbfv, moreInformationAt=https://errors.corda.net/OS/4.4/xffbfv] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The Respondent property must change in a transfer.
	at com.template.contracts.QAContract.verify(QAContract.kt:92) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[WARN ] 2020-04-19T23:56:48,492Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [645b659f-016d-4c97-ba0c-b7689f887848] errored, dumping all transitions:

 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.264Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[645b659f-016d-4c97-ba0c-b7689f887848], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Invocation, sessionId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=621F9DD6C38127FAB8C1FFBE847B3E42C138A244F2121DFCECCE24E84D8D5645), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@477ffa4c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@477ffa4c])
    SignalFlowHasStarted(flowId=[645b659f-016d-4c97-ba0c-b7689f887848])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@477ffa4c]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.429Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:56:48.258Z
    2020-04-19T23:56:48.414Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6478881686233892138, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.438Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.442Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:56:48.414Z
    2020-04-19T23:56:48.442Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [645b659f-016d-4c97-ba0c-b7689f887848] ---
  Timestamp: 2020-04-19T23:56:48.485Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E, errorId=6478881686233892138)], sessions=[], senderUUID=bee05586-8542-4eea-a5b8-a405b1d657bc)
    CreateTransaction
    RemoveCheckpoint(id=[645b659f-016d-4c97-ba0c-b7689f887848])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=645b659f-016d-4c97-ba0c-b7689f887848)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[645b659f-016d-4c97-ba0c-b7689f887848], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6478881686233892138, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Invocation, sessionId=a80e6582-3f57-465d-b8c8-6842d45fdc03, timestamp: 2020-04-19T23:56:48.255Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=621F9DD6C38127FAB8C1FFBE847B3E42C138A244F2121DFCECCE24E84D8D5645), errorState=Errored(errors=[FlowError(errorId=6478881686233892138, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=com.template.flows.AnswerInitiator@3ab7d454, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=bee05586-8542-4eea-a5b8-a405b1d657bc))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-19T23:56:48.442Z
    2020-04-19T23:56:48.463Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
[WARN ] 2020-04-19T23:56:48,492Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [645b659f-016d-4c97-ba0c-b7689f887848] error [errorCode=xffbfv, moreInformationAt=https://errors.corda.net/OS/4.4/xffbfv] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=645b659f-016d-4c97-ba0c-b7689f887848, invocation_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, invocation_timestamp=2020-04-19T23:56:48.255Z, origin=Only For Testing, session_id=a80e6582-3f57-465d-b8c8-6842d45fdc03, session_timestamp=2020-04-19T23:56:48.255Z, thread-id=211}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: The Respondent property must change in a transfer., contract: com.template.contracts.QAContract, transaction: 5807E5D02A03F4555D26F9EDE27B999556A615A6C13672139835F31381F5B65E
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:426) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.BasicVerifier.verifyContracts(TransactionVerifierServiceInternal.kt:375) ~[corda-core-4.4.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:69) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:207) ~[corda-core-4.4.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:52) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: The Respondent property must change in a transfer.
	at com.template.contracts.QAContract.verify(QAContract.kt:92) ~[contracts-0.1.jar:?]
	at net.corda.core.internal.ContractVerifier.apply(TransactionVerifierServiceInternal.kt:424) ~[corda-core-4.4.jar:?]
	... 19 more
[INFO ] 2020-04-20T00:04:02,239Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-20T00:04:02,741Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:04:06,518Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-20T00:04:10,436Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-20T00:04:10,461Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-20T00:04:10,463Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:04:11,352Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:11,383Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-20T00:04:12,179Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:12,180Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:04:12,190Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-20T00:04:12,460Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:04:12,494Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:04:13,301Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-20T00:04:13,936Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:04:13,946Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-20T00:04:13,989Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:04:13,990Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-20T00:04:13,990Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:04:15,377Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:04:15,377Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-20T00:04:15,526Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:04:15,526Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-20T00:04:15,568Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:04:15,568Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-20T00:04:15,653Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:04:15,653Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:15,871Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:04:15,882Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:15,882Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:04:15,893Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:15,920Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:04:15,966Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:15,967Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:04:15,967Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:15,990Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:16,054Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:16,064Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:04:16,065Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:16,214Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:04:16,224Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:16,225Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:04:16,225Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:16,236Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-20T00:04:16,602Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:16,602Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-20T00:04:16,618Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,386Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-20T00:04:17,386Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,417Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:04:17,417Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,449Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,460Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-20T00:04:17,460Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,460Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-20T00:04:17,460Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,460Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-20T00:04:17,460Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,470Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,480Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-20T00:04:17,576Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,576Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-20T00:04:17,597Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,597Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,597Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-20T00:04:17,618Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,618Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-20T00:04:17,650Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,650Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,650Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:04:17,650Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,683Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:04:17,694Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,694Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:04:17,694Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,694Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-20T00:04:17,738Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,738Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-20T00:04:17,738Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,749Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-20T00:04:17,750Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,751Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:04:17,751Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:04:17,761Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,761Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-20T00:04:17,772Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,772Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-20T00:04:17,783Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,783Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-20T00:04:17,783Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,783Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,793Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-20T00:04:17,847Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,847Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-20T00:04:17,855Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,855Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-20T00:04:17,855Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,856Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-20T00:04:17,856Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:04:17,856Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,883Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-20T00:04:17,914Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,914Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-20T00:04:17,925Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:04:17,946Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:17,946Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-20T00:04:17,946Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:04:17,977Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:04:18,015Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-20T00:04:18,015Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:04:18,059Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-20T00:04:18,381Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200420-000353.079\nodes\0\cordapps] {}
[INFO ] 2020-04-20T00:04:18,392Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-20T00:04:18,413Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-20T00:04:18,550Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-20T00:04:19,850Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-20T00:04:19,931Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-20T00:04:20,037Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-20T00:04:20,037Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-20T00:04:20,257Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-20T00:03:52.960Z
      epoch=1
  } {}
[INFO ] 2020-04-20T00:04:27,099Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:27,105Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200420-000353.079\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:27,105Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:27,222Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:27,458Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:27,468Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:31,955Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:32,942Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:32,946Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:32,954Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:32,954Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:33,078Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:33,173Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-20T00:04:33,203Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-20T00:04:33,203Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-20T00:04:33,639Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-20T00:04:33,688Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-20T00:04:33,688Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:33,703Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-20T00:04:34,322Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:34,495Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-20T00:04:34,549Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:34,648Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:34,706Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=6DF620E7597E5074F16F590E5F11B5667886270E27C61280CEC4B30158050FD9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-20T00:04:34,725Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-20T00:04:34,734Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-20T00:04:35,889Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:35,939Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:35,943Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:35,944Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:35,944Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:35,969Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200420-000353.079\nodes\1\cordapps] {}
[INFO ] 2020-04-20T00:04:35,971Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-20T00:04:35,971Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-20T00:04:35,984Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-20T00:04:36,037Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-20T00:04:36,041Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-20T00:04:36,099Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-20T00:04:36,099Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-20T00:04:36,106Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-20T00:03:52.960Z
      epoch=1
  } {}
[INFO ] 2020-04-20T00:04:37,724Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:37,729Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200420-000353.079\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:37,729Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:37,797Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:37,812Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:37,813Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:38,142Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:38,159Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:38,162Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:38,166Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:38,166Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:38,286Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:38,300Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-20T00:04:38,307Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:04:38,307Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:04:38,524Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:04:38,527Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-20T00:04:38,583Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-20T00:04:38,583Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:38,589Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-20T00:04:38,608Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:38,625Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-20T00:04:38,631Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:38,642Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:38,684Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=6DF620E7597E5074F16F590E5F11B5667886270E27C61280CEC4B30158050FD9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-20T00:04:38,700Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:38,705Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:38,709Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-20T00:04:38,728Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:38,732Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-20T00:04:38,757Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:38,757Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:38,758Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:38,758Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:38,777Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200420-000353.079\nodes\2\cordapps] {}
[INFO ] 2020-04-20T00:04:38,778Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-20T00:04:38,778Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-20T00:04:38,796Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000353.079/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-20T00:04:38,841Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-20T00:04:38,845Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-20T00:04:38,909Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-20T00:04:38,909Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-20T00:04:38,914Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-20T00:03:52.960Z
      epoch=1
  } {}
[INFO ] 2020-04-20T00:04:39,971Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:39,978Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200420-000353.079\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:39,978Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,032Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,041Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,041Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,285Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,298Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,301Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,306Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,306Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,452Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:04:40,463Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-20T00:04:40,465Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:04:40,465Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:04:40,622Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:04:40,624Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-20T00:04:40,663Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-20T00:04:40,663Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,668Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-20T00:04:40,683Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,695Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-20T00:04:40,699Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,710Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:40,743Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=6DF620E7597E5074F16F590E5F11B5667886270E27C61280CEC4B30158050FD9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-20T00:04:40,753Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,758Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341073688) {}
[INFO ] 2020-04-20T00:04:40,761Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-20T00:04:40,778Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,781Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-20T00:04:40,794Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341078583) {}
[INFO ] 2020-04-20T00:04:40,796Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-20T00:04:40,808Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,810Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-20T00:04:40,820Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,820Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:04:40,820Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341080663) {}
[INFO ] 2020-04-20T00:04:40,820Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-20T00:04:40,823Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-20T00:04:40,823Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-20T00:04:40,830Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-20T00:04:40,830Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-20T00:04:40,831Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-20T00:04:40,831Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-20T00:04:40,831Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-20T00:04:40,831Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-20T00:04:41,239Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61a4d5cc-1849-45c1-ad33-ca8a011a88f1, invocation_id=07023fc1-18b9-4615-b1cc-19d2c6769561, invocation_timestamp=2020-04-20T00:04:40.893Z, origin=Only For Testing, session_id=07023fc1-18b9-4615-b1cc-19d2c6769561, session_timestamp=2020-04-20T00:04:40.893Z, thread-id=212}
[WARN ] 2020-04-20T00:04:41,239Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61a4d5cc-1849-45c1-ad33-ca8a011a88f1, invocation_id=07023fc1-18b9-4615-b1cc-19d2c6769561, invocation_timestamp=2020-04-20T00:04:40.893Z, origin=Only For Testing, session_id=07023fc1-18b9-4615-b1cc-19d2c6769561, session_timestamp=2020-04-20T00:04:40.893Z, thread-id=212}
[INFO ] 2020-04-20T00:04:41,686Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61a4d5cc-1849-45c1-ad33-ca8a011a88f1, invocation_id=07023fc1-18b9-4615-b1cc-19d2c6769561, invocation_timestamp=2020-04-20T00:04:40.893Z, origin=Only For Testing, session_id=07023fc1-18b9-4615-b1cc-19d2c6769561, session_timestamp=2020-04-20T00:04:40.893Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:41,686Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61a4d5cc-1849-45c1-ad33-ca8a011a88f1, invocation_id=07023fc1-18b9-4615-b1cc-19d2c6769561, invocation_timestamp=2020-04-20T00:04:40.893Z, origin=Only For Testing, session_id=07023fc1-18b9-4615-b1cc-19d2c6769561, session_timestamp=2020-04-20T00:04:40.893Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:41,874Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61a4d5cc-1849-45c1-ad33-ca8a011a88f1, invocation_id=07023fc1-18b9-4615-b1cc-19d2c6769561, invocation_timestamp=2020-04-20T00:04:40.893Z, origin=Only For Testing, session_id=07023fc1-18b9-4615-b1cc-19d2c6769561, session_timestamp=2020-04-20T00:04:40.893Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:42,153Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=4837b1d7-ca82-4644-bcb5-9912d1aa6a28, invocation_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, invocation_timestamp=2020-04-20T00:04:42.069Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, session_timestamp=2020-04-20T00:04:42.069Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:42,251Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=4837b1d7-ca82-4644-bcb5-9912d1aa6a28, invocation_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, invocation_timestamp=2020-04-20T00:04:42.069Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, session_timestamp=2020-04-20T00:04:42.069Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:42,263Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=4837b1d7-ca82-4644-bcb5-9912d1aa6a28, invocation_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, invocation_timestamp=2020-04-20T00:04:42.069Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, session_timestamp=2020-04-20T00:04:42.069Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:42,276Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=4837b1d7-ca82-4644-bcb5-9912d1aa6a28, invocation_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, invocation_timestamp=2020-04-20T00:04:42.069Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0dc960b2-e96f-46c9-914d-10c0aae2d52d, session_timestamp=2020-04-20T00:04:42.069Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:42,327Z [Mock network] corda.flow. - Party O=PartyB, L=New York, C=US received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61a4d5cc-1849-45c1-ad33-ca8a011a88f1, invocation_id=07023fc1-18b9-4615-b1cc-19d2c6769561, invocation_timestamp=2020-04-20T00:04:40.893Z, origin=Only For Testing, session_id=07023fc1-18b9-4615-b1cc-19d2c6769561, session_timestamp=2020-04-20T00:04:40.893Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:42,327Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61a4d5cc-1849-45c1-ad33-ca8a011a88f1, invocation_id=07023fc1-18b9-4615-b1cc-19d2c6769561, invocation_timestamp=2020-04-20T00:04:40.893Z, origin=Only For Testing, session_id=07023fc1-18b9-4615-b1cc-19d2c6769561, session_timestamp=2020-04-20T00:04:40.893Z, thread-id=212, tx_id=CF53B56FB7724B087EBEF0CAF488DA4FFCD02D4746F70DF78438D59299CF95DE}
[INFO ] 2020-04-20T00:04:42,622Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=PartyB, L=New York, C=US. {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
[INFO ] 2020-04-20T00:04:42,640Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
[INFO ] 2020-04-20T00:04:42,710Z [Mock network] corda.flow. - Flow raised an error: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.. Sending it to flow hospital to be triaged. {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
[INFO ] 2020-04-20T00:04:42,717Z [Mock network] statemachine.StaffedFlowHospital. - Flow [473570b6-895e-4063-88e1-56254ff3b89b] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9), errorState=Clean, numberOfSuspends=3), flowLogic=com.template.flows.AnswerResponder@1c272000, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7], isFlowResumed=true, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=8411bb57-1760-4801-98c9-809b13e3d42d) {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
[INFO ] 2020-04-20T00:04:42,722Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:296) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:83) ~[main/:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:70) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at com.template.flows.AnswerResponder$call$signedTransactionFlow$1.checkTransaction(AnswerFlow.kt:91) ~[main/:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:293) ~[corda-core-4.4.jar:?]
	... 18 more
[INFO ] 2020-04-20T00:04:42,729Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:296) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:83) ~[main/:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:70) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at com.template.flows.AnswerResponder$call$signedTransactionFlow$1.checkTransaction(AnswerFlow.kt:91) ~[main/:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:293) ~[corda-core-4.4.jar:?]
	... 18 more
[WARN ] 2020-04-20T00:04:42,768Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [473570b6-895e-4063-88e1-56254ff3b89b] errored, dumping all transitions:

 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.589Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=FC52C199FBFAD8BF42DC69178004A9AD46DA1E5CC6F716E062278BC3D964ADEC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1eca7d66])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1eca7d66])
    SignalFlowHasStarted(flowId=[473570b6-895e-4063-88e1-56254ff3b89b])
    SendExisting(peerParty=O=PartyB, L=New York, C=US, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7828207140176621533), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1233602892200874394-1352592149107293086-0-0), senderUUID=8411bb57-1760-4801-98c9-809b13e3d42d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-7828207140176621533): 
    null
    Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1eca7d66]
    []


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.602Z
  Event: EnterSubFlow(subFlowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.583Z
    2020-04-20T00:04:42.602Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.603Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.602Z
    2020-04-20T00:04:42.603Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.617Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), maySkipCheckpoint=false, fiber=C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694, )
  Actions: 
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.603Z
    2020-04-20T00:04:42.612Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=FC52C199FBFAD8BF42DC69178004A9AD46DA1E5CC6F716E062278BC3D964ADEC)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.619Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2020-04-20T00:04:42.612Z
    2020-04-20T00:04:42.618Z
checkpoint.sessions.SessionId(toLong=-7828207140176621533).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.623Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.618Z
    2020-04-20T00:04:42.623Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.623Z
    2020-04-20T00:04:42.625Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.628Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.625Z
    2020-04-20T00:04:42.628Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.629Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.628Z
    2020-04-20T00:04:42.629Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.639Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2, )
  Actions: 
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.629Z
    2020-04-20T00:04:42.636Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694
    86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.640Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=PartyB, L=New York, C=US, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1233602892200874394-1352592149107293086-2-0), senderUUID=8411bb57-1760-4801-98c9-809b13e3d42d))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.640Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.639Z
    2020-04-20T00:04:42.640Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.657Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.640Z
    2020-04-20T00:04:42.657Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.663Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), maySkipCheckpoint=false, fiber=3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9, )
  Actions: 
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.657Z
    2020-04-20T00:04:42.661Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))])
checkpoint.flowState.frozenFiber.hash: 
    86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2
    3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.664Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.699Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7828207140176621533), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7, sender=O=PartyB, L=New York, C=US)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.664Z
    2020-04-20T00:04:42.699Z
checkpoint.sessions.SessionId(toLong=-7828207140176621533).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.700Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-7828207140176621533).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.710Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.699Z
    2020-04-20T00:04:42.710Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.731Z
  Event: Error(exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.710Z
    2020-04-20T00:04:42.715Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.737Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.742Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.715Z
    2020-04-20T00:04:42.742Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
[WARN ] 2020-04-20T00:04:42,768Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [473570b6-895e-4063-88e1-56254ff3b89b] error [errorCode=1k9qxma, moreInformationAt=https://errors.corda.net/OS/4.4/1k9qxma] {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:296) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:83) ~[main/:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:70) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at com.template.flows.AnswerResponder$call$signedTransactionFlow$1.checkTransaction(AnswerFlow.kt:91) ~[main/:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:293) ~[corda-core-4.4.jar:?]
	... 18 more
[WARN ] 2020-04-20T00:04:42,772Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=1k9qxma, moreInformationAt=https://errors.corda.net/OS/4.4/1k9qxma] {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:296) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:83) ~[main/:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:70) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at com.template.flows.AnswerResponder$call$signedTransactionFlow$1.checkTransaction(AnswerFlow.kt:91) ~[main/:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:293) ~[corda-core-4.4.jar:?]
	... 18 more
[WARN ] 2020-04-20T00:04:43,080Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [473570b6-895e-4063-88e1-56254ff3b89b] errored, dumping all transitions:

 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.589Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=FC52C199FBFAD8BF42DC69178004A9AD46DA1E5CC6F716E062278BC3D964ADEC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1eca7d66])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1eca7d66])
    SignalFlowHasStarted(flowId=[473570b6-895e-4063-88e1-56254ff3b89b])
    SendExisting(peerParty=O=PartyB, L=New York, C=US, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7828207140176621533), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1233602892200874394-1352592149107293086-0-0), senderUUID=8411bb57-1760-4801-98c9-809b13e3d42d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-7828207140176621533): 
    null
    Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1eca7d66]
    []


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.602Z
  Event: EnterSubFlow(subFlowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.583Z
    2020-04-20T00:04:42.602Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.603Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.602Z
    2020-04-20T00:04:42.603Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.617Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), maySkipCheckpoint=false, fiber=C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694, )
  Actions: 
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.603Z
    2020-04-20T00:04:42.612Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=FC52C199FBFAD8BF42DC69178004A9AD46DA1E5CC6F716E062278BC3D964ADEC)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.619Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2020-04-20T00:04:42.612Z
    2020-04-20T00:04:42.618Z
checkpoint.sessions.SessionId(toLong=-7828207140176621533).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.623Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.618Z
    2020-04-20T00:04:42.623Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.623Z
    2020-04-20T00:04:42.625Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.625Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.628Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.625Z
    2020-04-20T00:04:42.628Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.629Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.628Z
    2020-04-20T00:04:42.629Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.639Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2, )
  Actions: 
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.629Z
    2020-04-20T00:04:42.636Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    C8FD0CBA3507A0F45CDB37E4AF95B4B52A364E8F108E7E142764C291DECB0694
    86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.640Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=PartyB, L=New York, C=US, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1233602892200874394-1352592149107293086-2-0), senderUUID=8411bb57-1760-4801-98c9-809b13e3d42d))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.640Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.639Z
    2020-04-20T00:04:42.640Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.657Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.640Z
    2020-04-20T00:04:42.657Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.663Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), maySkipCheckpoint=false, fiber=3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9, )
  Actions: 
    PersistCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.657Z
    2020-04-20T00:04:42.661Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))])
checkpoint.flowState.frozenFiber.hash: 
    86638A0C8809D1B676373207C1A2304ECEC9DAFB157D3ACAC2EA86FC1BBCAFE2
    3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.664Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.699Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7828207140176621533), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7, sender=O=PartyB, L=New York, C=US)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.664Z
    2020-04-20T00:04:42.699Z
checkpoint.sessions.SessionId(toLong=-7828207140176621533).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.700Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-7828207140176621533).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.710Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.699Z
    2020-04-20T00:04:42.710Z
checkpoint.subFlowStack: 
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class com.template.flows.AnswerResponder$call$signedTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.731Z
  Event: Error(exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.710Z
    2020-04-20T00:04:42.715Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.737Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:42.742Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.715Z
    2020-04-20T00:04:42.742Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [473570b6-895e-4063-88e1-56254ff3b89b] ---
  Timestamp: 2020-04-20T00:04:43.068Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted., errorId=7513852670302266984)], sessions=[Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)], senderUUID=8411bb57-1760-4801-98c9-809b13e3d42d)
    CreateTransaction
    RemoveCheckpoint(id=[473570b6-895e-4063-88e1-56254ff3b89b])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7])
    ReleaseSoftLocks(uuid=473570b6-895e-4063-88e1-56254ff3b89b)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7828207140176621533)])
    RemoveFlow(flowId=[473570b6-895e-4063-88e1-56254ff3b89b], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=PartyB, L=New York, C=US), trace=Trace(invocationId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Invocation, sessionId=8e669c5a-423c-4037-8505-bb608f82e3af, timestamp: 2020-04-20T00:04:42.580Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-7828207140176621533)=Initiated(peerParty=O=PartyB, L=New York, C=US, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1233602892200874394)), errors=[], deduplicationSeed=D--1233602892200874394-1352592149107293086)}, subFlowStack=[Inlined(flowClass=class com.template.flows.AnswerResponder, subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=PartyB, L=New York, C=US, sourceSessionId=SessionId(toLong=-7828207140176621533))]), frozenFiber=3DDAB61C534D7CA55FAED8CDBF2AAAF1F76CFA8198059938933AA071F802CBC9), errorState=Errored(errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=com.template.flows.AnswerResponder@1c272000, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=8411bb57-1760-4801-98c9-809b13e3d42d))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.742Z
    2020-04-20T00:04:42.769Z
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1cf9c1a7]
    []
isRemoved: 
    false
    true
 {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
[WARN ] 2020-04-20T00:04:43,080Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [473570b6-895e-4063-88e1-56254ff3b89b] error [errorCode=1k9qxma, moreInformationAt=https://errors.corda.net/OS/4.4/1k9qxma] {fiber-id=10000004, flow-id=473570b6-895e-4063-88e1-56254ff3b89b, invocation_id=8e669c5a-423c-4037-8505-bb608f82e3af, invocation_timestamp=2020-04-20T00:04:42.580Z, origin=O=PartyB, L=New York, C=US, session_id=8e669c5a-423c-4037-8505-bb608f82e3af, session_timestamp=2020-04-20T00:04:42.580Z, thread-id=212, tx_id=9A5F1081BB397C694B4BF5FFB6F91810B94ECF1FFCE9FD087663789761AB1083}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:296) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:83) ~[main/:?]
	at com.template.flows.AnswerResponder.call(AnswerFlow.kt:70) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at com.template.flows.AnswerResponder$call$signedTransactionFlow$1.checkTransaction(AnswerFlow.kt:91) ~[main/:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:293) ~[corda-core-4.4.jar:?]
	... 18 more
[INFO ] 2020-04-20T00:04:43,090Z [Mock network] corda.flow. - Flow raised an error: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
[INFO ] 2020-04-20T00:04:43,091Z [Mock network] statemachine.StaffedFlowHospital. - Flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], deduplicationSeed=R--1233602892200874394-1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))]), frozenFiber=47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225), errorState=Clean, numberOfSuspends=3), flowLogic=com.template.flows.AnswerInitiator@353c26c7, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e], isFlowResumed=true, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=8c3e0fd8-210d-4951-8ed5-7c606f817e12) {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
[INFO ] 2020-04-20T00:04:43,092Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at Received counter-flow exception from peer O=Mock Company 1, L=London, C=GB.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:176) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:164) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:449) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:199) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:177) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:67) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:60) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: net.corda.core.CordaRuntimeException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
[INFO ] 2020-04-20T00:04:43,092Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at Received counter-flow exception from peer O=Mock Company 1, L=London, C=GB.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:176) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:164) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:449) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:199) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:177) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:67) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:60) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: net.corda.core.CordaRuntimeException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
[WARN ] 2020-04-20T00:04:43,104Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] errored, dumping all transitions:

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.362Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=28E257F0C6F06B73FDC5874B4ED757CD0CCFAB6047E578703120D11CC7EC9579), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40fb662c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40fb662c])
    SignalFlowHasStarted(flowId=[ffc0f8ff-1c37-4566-995a-4eb1e6298698])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40fb662c]
    []


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.514Z
  Event: InitiateFlow(destination=O=Mock Company 1, L=London, C=GB, wellKnownParty=O=Mock Company 1, L=London, C=GB)
  Actions: 
    AddSessionBinding(flowId=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], sessionId=SessionId(toLong=-1233602892200874394))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.357Z
    2020-04-20T00:04:42.514Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394): 
    null
    Uninitiated(destination=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1233602892200874394), additionalEntropy=1352592149107293086)


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.535Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.514Z
    2020-04-20T00:04:42.535Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.545Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.535Z
    2020-04-20T00:04:42.545Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.545Z
    2020-04-20T00:04:42.546Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.574Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2, )
  Actions: 
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Uninitiated(destination=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1233602892200874394), additionalEntropy=1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false), frozenFiber=9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.546Z
    2020-04-20T00:04:42.571Z
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=28E257F0C6F06B73FDC5874B4ED757CD0CCFAB6047E578703120D11CC7EC9579)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false), frozenFiber=9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.575Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(destination=O=Mock Company 1, L=London, C=GB, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-1233602892200874394), initiationEntropy=1352592149107293086, initiatorFlowClassName=com.template.flows.AnswerInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--1233602892200874394-1352592149107293086-1-0), senderUUID=8c3e0fd8-210d-4951-8ed5-7c606f817e12))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.571Z
    2020-04-20T00:04:42.575Z
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))])
checkpoint.sessions.SessionId(toLong=-1233602892200874394): 
    Uninitiated(destination=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1233602892200874394), additionalEntropy=1352592149107293086)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1233602892200874394-1352592149107293086)


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.667Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7828207140176621533), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.575Z
    2020-04-20T00:04:42.667Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1233602892200874394-1352592149107293086)
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[], deduplicationSeed=R--1233602892200874394-1352592149107293086)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.667Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.672Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.667Z
    2020-04-20T00:04:42.672Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.673Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1233602892200874394).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.674Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.672Z
    2020-04-20T00:04:42.674Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.684Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396}), maySkipCheckpoint=false, fiber=8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8, )
  Actions: 
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[], deduplicationSeed=R--1233602892200874394-1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396}), frozenFiber=8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.674Z
    2020-04-20T00:04:42.680Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396})
checkpoint.flowState.frozenFiber.hash: 
    9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2
    8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f]
    []


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.686Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7828207140176621533), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--1233602892200874394-1352592149107293086-2-0), senderUUID=8c3e0fd8-210d-4951-8ed5-7c606f817e12))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.694Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))]), maySkipCheckpoint=false, fiber=47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225, )
  Actions: 
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[], deduplicationSeed=R--1233602892200874394-1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))]), frozenFiber=47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.685Z
    2020-04-20T00:04:42.692Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))])
checkpoint.flowState.frozenFiber.hash: 
    8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8
    47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.695Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.088Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=ErrorSessionMessage(flowException=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted., errorId=7513852670302266984)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.695Z
    2020-04-20T00:04:43.088Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394).errors: 
    []
    [FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.089Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.090Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:43.088Z
    2020-04-20T00:04:43.090Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.090Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.092Z
  Event: Error(exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.092Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.092Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:43.090Z
    2020-04-20T00:04:43.092Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
[WARN ] 2020-04-20T00:04:43,104Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] error [errorCode=192gef1, moreInformationAt=https://errors.corda.net/OS/4.4/192gef1] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at Received counter-flow exception from peer O=Mock Company 1, L=London, C=GB.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:176) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:164) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:449) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:199) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:177) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:67) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:60) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: net.corda.core.CordaRuntimeException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
[WARN ] 2020-04-20T00:04:43,104Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
[WARN ] 2020-04-20T00:04:43,144Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] errored, dumping all transitions:

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.362Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=28E257F0C6F06B73FDC5874B4ED757CD0CCFAB6047E578703120D11CC7EC9579), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40fb662c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40fb662c])
    SignalFlowHasStarted(flowId=[ffc0f8ff-1c37-4566-995a-4eb1e6298698])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40fb662c]
    []


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.514Z
  Event: InitiateFlow(destination=O=Mock Company 1, L=London, C=GB, wellKnownParty=O=Mock Company 1, L=London, C=GB)
  Actions: 
    AddSessionBinding(flowId=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], sessionId=SessionId(toLong=-1233602892200874394))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.357Z
    2020-04-20T00:04:42.514Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394): 
    null
    Uninitiated(destination=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1233602892200874394), additionalEntropy=1352592149107293086)


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.535Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.514Z
    2020-04-20T00:04:42.535Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.545Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.535Z
    2020-04-20T00:04:42.545Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.545Z
    2020-04-20T00:04:42.546Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.574Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2, )
  Actions: 
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Uninitiated(destination=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1233602892200874394), additionalEntropy=1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false), frozenFiber=9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.546Z
    2020-04-20T00:04:42.571Z
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=28E257F0C6F06B73FDC5874B4ED757CD0CCFAB6047E578703120D11CC7EC9579)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false), frozenFiber=9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.575Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(destination=O=Mock Company 1, L=London, C=GB, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-1233602892200874394), initiationEntropy=1352592149107293086, initiatorFlowClassName=com.template.flows.AnswerInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--1233602892200874394-1352592149107293086-1-0), senderUUID=8c3e0fd8-210d-4951-8ed5-7c606f817e12))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.571Z
    2020-04-20T00:04:42.575Z
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=A231849056EB0CDED60548D1AAE7A97E27F092C9E8AD5B329733106392B0C5A1}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))])
checkpoint.sessions.SessionId(toLong=-1233602892200874394): 
    Uninitiated(destination=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1233602892200874394), additionalEntropy=1352592149107293086)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1233602892200874394-1352592149107293086)


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.667Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7828207140176621533), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.575Z
    2020-04-20T00:04:42.667Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1233602892200874394-1352592149107293086)
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[], deduplicationSeed=R--1233602892200874394-1352592149107293086)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.667Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.672Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.667Z
    2020-04-20T00:04:42.672Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.673Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-1233602892200874394).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.674Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.672Z
    2020-04-20T00:04:42.674Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.SendTransactionFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.684Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396}), maySkipCheckpoint=false, fiber=8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8, )
  Actions: 
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[], deduplicationSeed=R--1233602892200874394-1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396}), frozenFiber=8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.674Z
    2020-04-20T00:04:42.680Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396})
checkpoint.flowState.frozenFiber.hash: 
    9DD1706C73C2067B68939DDF53CB3565BFBCB61B72C83BA77686F9584D0680A2
    8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4f46e3c3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72619a3f]
    []


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.686Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7828207140176621533), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--1233602892200874394-1352592149107293086-2-0), senderUUID=8c3e0fd8-210d-4951-8ed5-7c606f817e12))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.694Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))]), maySkipCheckpoint=false, fiber=47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225, )
  Actions: 
    PersistCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[], deduplicationSeed=R--1233602892200874394-1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))]), frozenFiber=47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-04-20T00:04:42.685Z
    2020-04-20T00:04:42.692Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))=C95B48B7A6BD0490AECC8A337BCE2279BB9084327ACC578D3CA3C1648DCE5396})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))])
checkpoint.flowState.frozenFiber.hash: 
    8F8D85840AE8D45DBA98C4656F9A1EA9FC2D26ACB1F1CED2ABB424A48D8262E8
    47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:42.695Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.088Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1233602892200874394), payload=ErrorSessionMessage(flowException=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted., errorId=7513852670302266984)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:42.695Z
    2020-04-20T00:04:43.088Z
checkpoint.sessions.SessionId(toLong=-1233602892200874394).errors: 
    []
    [FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.089Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.090Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:43.088Z
    2020-04-20T00:04:43.090Z
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignatureFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.090Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=6), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)]


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.092Z
  Event: Error(exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.092Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.092Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:43.090Z
    2020-04-20T00:04:43.092Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] ---
  Timestamp: 2020-04-20T00:04:43.134Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7513852670302266984)], sessions=[], senderUUID=8c3e0fd8-210d-4951-8ed5-7c606f817e12)
    CreateTransaction
    RemoveCheckpoint(id=[ffc0f8ff-1c37-4566-995a-4eb1e6298698])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e])
    ReleaseSoftLocks(uuid=ffc0f8ff-1c37-4566-995a-4eb1e6298698)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1233602892200874394)])
    RemoveFlow(flowId=[ffc0f8ff-1c37-4566-995a-4eb1e6298698], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US)), trace=Trace(invocationId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Invocation, sessionId=b952de40-da50-4d9e-943a-c8380b9dbe7b, timestamp: 2020-04-20T00:04:42.354Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=PartyB, L=New York, C=US), externalTrace=null, impersonatedActor=null), ourIdentity=O=PartyB, L=New York, C=US, sessions={SessionId(toLong=-1233602892200874394)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-7828207140176621533)), errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], deduplicationSeed=R--1233602892200874394-1352592149107293086)}, subFlowStack=[Initiating(flowClass=class com.template.flows.AnswerInitiator, classToInitiateWith=class com.template.flows.AnswerInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=6, corDappName=workflows-0.1, corDappHash=F10D9C1902D686CED45A48F1185DB7E0904ED2CFBDB314792783B7B44519EFD8), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1233602892200874394))]), frozenFiber=47CD0E65962E9E49159C97ED1ED80EFDAC3D1B47B145888BB550D8142D941225), errorState=Errored(errors=[FlowError(errorId=7513852670302266984, exception=net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=com.template.flows.AnswerInitiator@353c26c7, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=8c3e0fd8-210d-4951-8ed5-7c606f817e12))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-04-20T00:04:43.092Z
    2020-04-20T00:04:43.104Z
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c99a7e]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
[WARN ] 2020-04-20T00:04:43,146Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ffc0f8ff-1c37-4566-995a-4eb1e6298698] error [errorCode=192gef1, moreInformationAt=https://errors.corda.net/OS/4.4/192gef1] {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=ffc0f8ff-1c37-4566-995a-4eb1e6298698, invocation_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, invocation_timestamp=2020-04-20T00:04:42.354Z, origin=Only For Testing, session_id=b952de40-da50-4d9e-943a-c8380b9dbe7b, session_timestamp=2020-04-20T00:04:42.354Z, thread-id=212}
net.corda.core.flows.FlowException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
	at Received counter-flow exception from peer O=Mock Company 1, L=London, C=GB.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:176) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:164) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:449) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignatureFlow.call(CollectSignaturesFlow.kt:199) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:177) ~[corda-core-4.4.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:67) ~[corda-core-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:331) ~[corda-node-4.4.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:338) ~[corda-core-4.4.jar:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:60) ~[main/:?]
	at com.template.flows.AnswerInitiator.call(AnswerFlow.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:271) ~[corda-node-4.4.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.4.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.4.jar:?]
Caused by: net.corda.core.CordaRuntimeException: java.lang.IllegalArgumentException: Failed requirement: This kind of questions is not accepted.
[INFO ] 2020-04-20T00:06:28,735Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\dev\qa-ludwig-project\workflows ... {}
[INFO ] 2020-04-20T00:06:29,273Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:06:32,888Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-20T00:06:36,307Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-20T00:06:36,330Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-20T00:06:36,331Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:06:37,185Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:37,233Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-20T00:06:38,016Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:38,027Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:06:38,028Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-20T00:06:38,273Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:06:38,304Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:06:39,060Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-20T00:06:39,661Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:06:39,672Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-20T00:06:39,705Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:06:39,705Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-20T00:06:39,705Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-20T00:06:41,088Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:06:41,088Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-04-20T00:06:41,237Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:06:41,237Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-04-20T00:06:41,268Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:06:41,268Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-04-20T00:06:41,364Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-20T00:06:41,364Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:41,558Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:06:41,569Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:41,569Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:06:41,569Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:41,591Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:06:41,602Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:41,602Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:06:41,602Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:41,612Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:41,665Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:41,676Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:06:41,676Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:41,806Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:06:41,817Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:41,817Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:06:41,817Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:41,817Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-04-20T00:06:42,167Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:42,167Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-20T00:06:42,167Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:42,903Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-04-20T00:06:42,903Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:42,946Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:06:42,946Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2020-04-20T00:06:42,989Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,000Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-04-20T00:06:43,000Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,011Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-04-20T00:06:43,011Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,011Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-04-20T00:06:43,011Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,011Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,021Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-04-20T00:06:43,094Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,094Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-04-20T00:06:43,115Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,115Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,115Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2020-04-20T00:06:43,139Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,139Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-04-20T00:06:43,190Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,190Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,190Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2020-04-20T00:06:43,202Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,227Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:06:43,241Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,242Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:06:43,243Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,245Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-04-20T00:06:43,293Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,293Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-20T00:06:43,304Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,304Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-04-20T00:06:43,304Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,314Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2020-04-20T00:06:43,314Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2020-04-20T00:06:43,324Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,324Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-04-20T00:06:43,324Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,337Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-04-20T00:06:43,347Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,348Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-04-20T00:06:43,348Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,348Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,361Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-04-20T00:06:43,458Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,458Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-20T00:06:43,458Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,458Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-20T00:06:43,459Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,459Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-04-20T00:06:43,459Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-04-20T00:06:43,459Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,475Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2020-04-20T00:06:43,538Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:43,538Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-04-20T00:06:46,464Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-20T00:06:46,474Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:46,485Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-04-20T00:06:46,485Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-20T00:06:46,502Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:06:46,520Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\dev\qa-ludwig-project\.gradle {}
[INFO ] 2020-04-20T00:06:46,520Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-20T00:06:46,564Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-20T00:06:46,849Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200420-000619.942\nodes\0\cordapps] {}
[INFO ] 2020-04-20T00:06:46,860Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-20T00:06:46,880Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-20T00:06:47,020Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-20T00:06:48,193Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-20T00:06:48,261Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-20T00:06:48,355Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-20T00:06:48,356Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-20T00:06:49,059Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-20T00:06:19.815Z
      epoch=1
  } {}
[INFO ] 2020-04-20T00:06:56,458Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:06:56,466Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200420-000619.942\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:06:56,466Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:06:56,531Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:06:56,741Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:06:56,755Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:00,229Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:01,198Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:01,201Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:01,209Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:01,209Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:01,338Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:01,431Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-20T00:07:01,473Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-20T00:07:01,473Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-20T00:07:01,875Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-20T00:07:01,892Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-20T00:07:01,892Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:01,901Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-20T00:07:02,209Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:02,286Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-20T00:07:02,315Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:02,359Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:02,400Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=6DF620E7597E5074F16F590E5F11B5667886270E27C61280CEC4B30158050FD9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-20T00:07:02,408Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-20T00:07:02,413Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-20T00:07:03,043Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:03,081Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:03,086Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:03,087Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:03,087Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:03,109Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200420-000619.942\nodes\1\cordapps] {}
[INFO ] 2020-04-20T00:07:03,110Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-20T00:07:03,111Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-20T00:07:03,123Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-20T00:07:03,185Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-20T00:07:03,188Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-20T00:07:03,240Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-20T00:07:03,240Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-20T00:07:03,246Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-20T00:06:19.815Z
      epoch=1
  } {}
[INFO ] 2020-04-20T00:07:04,360Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,367Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200420-000619.942\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,367Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,413Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,419Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,419Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,763Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,793Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,796Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,804Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,804Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,930Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:04,939Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-20T00:07:04,944Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:07:04,944Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:07:05,181Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:07:05,183Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-20T00:07:05,241Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-20T00:07:05,241Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:05,247Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-20T00:07:05,264Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:05,282Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-20T00:07:05,297Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:05,314Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:05,358Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=6DF620E7597E5074F16F590E5F11B5667886270E27C61280CEC4B30158050FD9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-20T00:07:05,376Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:05,381Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:05,385Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-20T00:07:05,402Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:05,406Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-20T00:07:05,421Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:05,421Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:05,422Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:05,422Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:05,443Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200420-000619.942\nodes\2\cordapps] {}
[INFO ] 2020-04-20T00:07:05,445Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-04-20T00:07:05,445Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-04-20T00:07:05,459Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/dev/qa-ludwig-project/workflows/build/mock-network/20200420-000619.942/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-04-20T00:07:05,537Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-04-20T00:07:05,540Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-20T00:07:05,596Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[INFO ] 2020-04-20T00:07:05,597Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[INFO ] 2020-04-20T00:07:05,603Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-20T00:06:19.815Z
      epoch=1
  } {}
[INFO ] 2020-04-20T00:07:06,654Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:06,663Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200420-000619.942\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:06,663Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:06,743Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:06,763Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:06,763Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:07,067Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:07,093Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:07,097Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:07,103Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:07,103Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:07,278Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-20T00:07:07,287Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-20T00:07:07,291Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:07:07,292Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:07:07,475Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-20T00:07:07,477Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-20T00:07:07,513Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-20T00:07:07,513Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:07,516Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-20T00:07:07,529Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:07,541Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-20T00:07:07,549Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:07,563Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:08,183Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=6DF620E7597E5074F16F590E5F11B5667886270E27C61280CEC4B30158050FD9 uploader=app filename=Template CorDapp {}
[INFO ] 2020-04-20T00:07:08,193Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:08,197Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=6, serial=1587341221892) {}
[INFO ] 2020-04-20T00:07:08,200Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-20T00:07:08,211Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:08,213Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-20T00:07:08,225Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=6, serial=1587341225241) {}
[INFO ] 2020-04-20T00:07:08,227Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-20T00:07:08,239Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:08,241Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=PartyB, L=New York, C=US {}
[INFO ] 2020-04-20T00:07:08,252Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:08,252Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-20T00:07:08,252Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=New York, C=US], platformVersion=6, serial=1587341227513) {}
[INFO ] 2020-04-20T00:07:08,252Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-20T00:07:08,256Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-20T00:07:08,256Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-20T00:07:08,264Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-20T00:07:08,264Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-20T00:07:08,264Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AskInitiator, currently using: class com.template.flows.AskResponder {}
[INFO ] 2020-04-20T00:07:08,264Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AskInitiator to initiate com.template.flows.AskResponder (version 1) {}
[WARN ] 2020-04-20T00:07:08,264Z [Test worker] internal.NodeFlowManager. - Multiple flows are registered for InitiatingFlow: class com.template.flows.AnswerInitiator, currently using: class com.template.flows.AnswerResponder {}
[INFO ] 2020-04-20T00:07:08,264Z [Test worker] internal.NodeFlowManager. - Registered com.template.flows.AnswerInitiator to initiate com.template.flows.AnswerResponder (version 1) {}
[WARN ] 2020-04-20T00:07:08,586Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=99ea94bc-9586-45e6-a7c4-3d3577f98ad2, invocation_id=8e98119d-c09e-4d69-919e-01beb02bfa72, invocation_timestamp=2020-04-20T00:07:08.311Z, origin=Only For Testing, session_id=8e98119d-c09e-4d69-919e-01beb02bfa72, session_timestamp=2020-04-20T00:07:08.311Z, thread-id=212}
[WARN ] 2020-04-20T00:07:08,586Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract com.template.contracts.QAContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=99ea94bc-9586-45e6-a7c4-3d3577f98ad2, invocation_id=8e98119d-c09e-4d69-919e-01beb02bfa72, invocation_timestamp=2020-04-20T00:07:08.311Z, origin=Only For Testing, session_id=8e98119d-c09e-4d69-919e-01beb02bfa72, session_timestamp=2020-04-20T00:07:08.311Z, thread-id=212}
[INFO ] 2020-04-20T00:07:09,055Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=99ea94bc-9586-45e6-a7c4-3d3577f98ad2, invocation_id=8e98119d-c09e-4d69-919e-01beb02bfa72, invocation_timestamp=2020-04-20T00:07:08.311Z, origin=Only For Testing, session_id=8e98119d-c09e-4d69-919e-01beb02bfa72, session_timestamp=2020-04-20T00:07:08.311Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,055Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=99ea94bc-9586-45e6-a7c4-3d3577f98ad2, invocation_id=8e98119d-c09e-4d69-919e-01beb02bfa72, invocation_timestamp=2020-04-20T00:07:08.311Z, origin=Only For Testing, session_id=8e98119d-c09e-4d69-919e-01beb02bfa72, session_timestamp=2020-04-20T00:07:08.311Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,197Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=99ea94bc-9586-45e6-a7c4-3d3577f98ad2, invocation_id=8e98119d-c09e-4d69-919e-01beb02bfa72, invocation_timestamp=2020-04-20T00:07:08.311Z, origin=Only For Testing, session_id=8e98119d-c09e-4d69-919e-01beb02bfa72, session_timestamp=2020-04-20T00:07:08.311Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,486Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=c6d4c9b9-3045-4c65-abfb-bf349d0d6d1c, invocation_id=3fe162e0-50f4-4218-b045-8a121df56dbd, invocation_timestamp=2020-04-20T00:07:09.406Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3fe162e0-50f4-4218-b045-8a121df56dbd, session_timestamp=2020-04-20T00:07:09.406Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,559Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=c6d4c9b9-3045-4c65-abfb-bf349d0d6d1c, invocation_id=3fe162e0-50f4-4218-b045-8a121df56dbd, invocation_timestamp=2020-04-20T00:07:09.406Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3fe162e0-50f4-4218-b045-8a121df56dbd, session_timestamp=2020-04-20T00:07:09.406Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,568Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=c6d4c9b9-3045-4c65-abfb-bf349d0d6d1c, invocation_id=3fe162e0-50f4-4218-b045-8a121df56dbd, invocation_timestamp=2020-04-20T00:07:09.406Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3fe162e0-50f4-4218-b045-8a121df56dbd, session_timestamp=2020-04-20T00:07:09.406Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,584Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=c6d4c9b9-3045-4c65-abfb-bf349d0d6d1c, invocation_id=3fe162e0-50f4-4218-b045-8a121df56dbd, invocation_timestamp=2020-04-20T00:07:09.406Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3fe162e0-50f4-4218-b045-8a121df56dbd, session_timestamp=2020-04-20T00:07:09.406Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,646Z [Mock network] corda.flow. - Party O=PartyB, L=New York, C=US received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=99ea94bc-9586-45e6-a7c4-3d3577f98ad2, invocation_id=8e98119d-c09e-4d69-919e-01beb02bfa72, invocation_timestamp=2020-04-20T00:07:08.311Z, origin=Only For Testing, session_id=8e98119d-c09e-4d69-919e-01beb02bfa72, session_timestamp=2020-04-20T00:07:08.311Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,646Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=99ea94bc-9586-45e6-a7c4-3d3577f98ad2, invocation_id=8e98119d-c09e-4d69-919e-01beb02bfa72, invocation_timestamp=2020-04-20T00:07:08.311Z, origin=Only For Testing, session_id=8e98119d-c09e-4d69-919e-01beb02bfa72, session_timestamp=2020-04-20T00:07:08.311Z, thread-id=212, tx_id=37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65}
[INFO ] 2020-04-20T00:07:09,944Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=PartyB, L=New York, C=US. {fiber-id=10000004, flow-id=6b603010-b186-4cef-817d-4a545f48a8d8, invocation_id=dcac69f4-563b-4b96-b9c2-7615023719b8, invocation_timestamp=2020-04-20T00:07:09.911Z, origin=O=PartyB, L=New York, C=US, session_id=dcac69f4-563b-4b96-b9c2-7615023719b8, session_timestamp=2020-04-20T00:07:09.911Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:09,958Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=6b603010-b186-4cef-817d-4a545f48a8d8, invocation_id=dcac69f4-563b-4b96-b9c2-7615023719b8, invocation_timestamp=2020-04-20T00:07:09.911Z, origin=O=PartyB, L=New York, C=US, session_id=dcac69f4-563b-4b96-b9c2-7615023719b8, session_timestamp=2020-04-20T00:07:09.911Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,087Z [Mock network] corda.flow. - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=2dc184ec-2627-4823-b048-e03e10464d46, invocation_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, invocation_timestamp=2020-04-20T00:07:09.675Z, origin=Only For Testing, session_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, session_timestamp=2020-04-20T00:07:09.675Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,183Z [Mock network] corda.flow. - Received a notarisation request for Tx [3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E] from [O=PartyB, L=New York, C=US] {fiber-id=10000005, flow-id=afb924f6-eb91-40d4-a4b0-9e52c9a3b3dd, invocation_id=49aa37cc-0e67-404f-b1bb-4a1ed86bbcbb, invocation_timestamp=2020-04-20T00:07:10.144Z, origin=O=PartyB, L=New York, C=US, session_id=49aa37cc-0e67-404f-b1bb-4a1ed86bbcbb, session_timestamp=2020-04-20T00:07:10.144Z, thread-id=212}
[INFO ] 2020-04-20T00:07:10,430Z [Notary request queue processor] transactions.PersistentUniquenessProvider. - Successfully committed all input states: [37BF02422A543D58CD7AF4543AFF80AD3B7DA1287FE13DEE05776A816324FF65(0)]. TxId: 3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E {}
[INFO ] 2020-04-20T00:07:10,442Z [Mock network] corda.flow. - Transaction [3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E] successfully notarised, sending signature back to [O=PartyB, L=New York, C=US] {fiber-id=10000005, flow-id=afb924f6-eb91-40d4-a4b0-9e52c9a3b3dd, invocation_id=49aa37cc-0e67-404f-b1bb-4a1ed86bbcbb, invocation_timestamp=2020-04-20T00:07:10.144Z, origin=O=PartyB, L=New York, C=US, session_id=49aa37cc-0e67-404f-b1bb-4a1ed86bbcbb, session_timestamp=2020-04-20T00:07:10.144Z, thread-id=212}
[INFO ] 2020-04-20T00:07:10,492Z [Mock network] corda.flow. - Notary responded (O=Notary Service, L=Zurich, C=CH). {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=2dc184ec-2627-4823-b048-e03e10464d46, invocation_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, invocation_timestamp=2020-04-20T00:07:09.675Z, origin=Only For Testing, session_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, session_timestamp=2020-04-20T00:07:09.675Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,494Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=2dc184ec-2627-4823-b048-e03e10464d46, invocation_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, invocation_timestamp=2020-04-20T00:07:09.675Z, origin=Only For Testing, session_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, session_timestamp=2020-04-20T00:07:09.675Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,506Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=2dc184ec-2627-4823-b048-e03e10464d46, invocation_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, invocation_timestamp=2020-04-20T00:07:09.675Z, origin=Only For Testing, session_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, session_timestamp=2020-04-20T00:07:09.675Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,524Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=PartyB, L=New York, C=US. {fiber-id=10000004, flow-id=6b603010-b186-4cef-817d-4a545f48a8d8, invocation_id=dcac69f4-563b-4b96-b9c2-7615023719b8, invocation_timestamp=2020-04-20T00:07:09.911Z, origin=O=PartyB, L=New York, C=US, session_id=dcac69f4-563b-4b96-b9c2-7615023719b8, session_timestamp=2020-04-20T00:07:09.911Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,536Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=6b603010-b186-4cef-817d-4a545f48a8d8, invocation_id=dcac69f4-563b-4b96-b9c2-7615023719b8, invocation_timestamp=2020-04-20T00:07:09.911Z, origin=O=PartyB, L=New York, C=US, session_id=dcac69f4-563b-4b96-b9c2-7615023719b8, session_timestamp=2020-04-20T00:07:09.911Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,547Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=6b603010-b186-4cef-817d-4a545f48a8d8, invocation_id=dcac69f4-563b-4b96-b9c2-7615023719b8, invocation_timestamp=2020-04-20T00:07:09.911Z, origin=O=PartyB, L=New York, C=US, session_id=dcac69f4-563b-4b96-b9c2-7615023719b8, session_timestamp=2020-04-20T00:07:09.911Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,558Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=6b603010-b186-4cef-817d-4a545f48a8d8, invocation_id=dcac69f4-563b-4b96-b9c2-7615023719b8, invocation_timestamp=2020-04-20T00:07:09.911Z, origin=O=PartyB, L=New York, C=US, session_id=dcac69f4-563b-4b96-b9c2-7615023719b8, session_timestamp=2020-04-20T00:07:09.911Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,575Z [Mock network] corda.flow. - Party O=Mock Company 1, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=2dc184ec-2627-4823-b048-e03e10464d46, invocation_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, invocation_timestamp=2020-04-20T00:07:09.675Z, origin=Only For Testing, session_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, session_timestamp=2020-04-20T00:07:09.675Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
[INFO ] 2020-04-20T00:07:10,575Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=PartyB, L=New York, C=US, actor_store_id=TEST, fiber-id=10000003, flow-id=2dc184ec-2627-4823-b048-e03e10464d46, invocation_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, invocation_timestamp=2020-04-20T00:07:09.675Z, origin=Only For Testing, session_id=c06b0ae4-52ab-45f1-92db-1cfa479446d1, session_timestamp=2020-04-20T00:07:09.675Z, thread-id=212, tx_id=3083C8E4BFD5DF4789BDB3343525975944865F2BC4DA4AACCB628D6BF748E99E}
